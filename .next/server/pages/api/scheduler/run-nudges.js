"use strict";(()=>{var e={};e.id=6811,e.ids=[6811],e.modules={3524:e=>{e.exports=require("@prisma/client")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},7202:e=>{e.exports=require("twilio")},4770:e=>{e.exports=require("crypto")},4319:(e,t,n)=>{n.r(t),n.d(t,{config:()=>y,default:()=>m,routeModule:()=>g});var r={};n.r(r),n.d(r,{default:()=>p});var s=n(1802),o=n(7153),a=n(6249),i=n(4895),d=n(5384),c=n(4770);class l{getEncryptionKey(){let e=process.env.PHONE_ENCRYPTION_KEY;if(!e||e.length!==2*this.keyLength)throw Error("PHONE_ENCRYPTION_KEY must be 64 hex characters (32 bytes)");return Buffer.from(e,"hex")}encryptPhone(e){let t=this.getEncryptionKey(),n=c.randomBytes(16),r=c.createCipher(this.algorithm,t),s=r.update(e,"utf8","hex");s+=r.final("hex");let o=r.getAuthTag();return`${n.toString("hex")}:${o.toString("hex")}:${s}`}decryptPhone(e){let t=this.getEncryptionKey(),[n,r,s]=e.split(":");if(!n||!r||!s)throw Error("Invalid encrypted phone format");Buffer.from(n,"hex");let o=Buffer.from(r,"hex"),a=c.createDecipher(this.algorithm,t);return a.setAuthTag(o),a.update(s,"hex","utf8")+a.final("utf8")}async storePhoneMapping(e,t){try{let n=this.encryptPhone(t);await i._.$executeRaw`
        INSERT INTO secure_phone_mappings (id, anonymous_id, encrypted_phone, created_at, updated_at, is_active)
        VALUES (gen_random_uuid(), ${e}, ${n}, NOW(), NOW(), true)
        ON CONFLICT (anonymous_id) 
        DO UPDATE SET 
          encrypted_phone = EXCLUDED.encrypted_phone, 
          updated_at = NOW(),
          is_active = true,
          deleted_at = NULL
      `}catch(e){throw console.error("Error storing phone mapping:",e),Error("Failed to store phone mapping")}}async getPhoneNumber(e){try{let t=await i._.$queryRaw`
        SELECT encrypted_phone 
        FROM secure_phone_mappings 
        WHERE anonymous_id = ${e} 
          AND is_active = true 
          AND deleted_at IS NULL
      `;if(0===t.length)return null;return this.decryptPhone(t[0].encrypted_phone)}catch(e){return console.error("Error retrieving phone number:",e),null}}async deletePhoneMapping(e){try{await i._.$executeRaw`
        UPDATE secure_phone_mappings 
        SET is_active = false, deleted_at = NOW(), updated_at = NOW()
        WHERE anonymous_id = ${e}
      `}catch(e){throw console.error("Error deleting phone mapping:",e),Error("Failed to delete phone mapping")}}async purgePhoneMapping(e){try{await i._.$executeRaw`
        DELETE FROM secure_phone_mappings 
        WHERE anonymous_id = ${e}
      `}catch(e){throw console.error("Error purging phone mapping:",e),Error("Failed to purge phone mapping")}}static generateEncryptionKey(){return c.randomBytes(32).toString("hex")}constructor(){this.algorithm="aes-256-gcm",this.keyLength=32}}class u{constructor(){this.bot=new d.a,this.phoneService=new l}async sendDailyCheckins(){try{let e=new Date(Date.now()-864e5),t=await i._.anonymousUser.findMany({where:{isActive:!0,lastActiveAt:{lt:e}},take:100}),n=0;for(let e of t){let t=await this.phoneService.getPhoneNumber(e.anonymousId);if(t)try{await this.bot.sendProactiveNudge(e.id,t,"daily_checkin"),n++,await new Promise(e=>setTimeout(e,1e3))}catch(t){console.error(`Failed to send nudge to user ${e.anonymousId}:`,t)}}console.log(`Sent daily check-ins to ${n}/${t.length} users`)}catch(e){throw console.error("Error sending daily check-ins:",e),e}}async sendMoodReminders(){try{let e=new Date(Date.now()-2592e5),t=(await i._.moodLog.findMany({where:{loggedAt:{gte:e}},select:{userId:!0},distinct:["userId"]})).map(e=>e.userId),n=await i._.anonymousUser.findMany({where:{isActive:!0,id:{notIn:t}},take:50}),r=0;for(let e of n){let t=await this.phoneService.getPhoneNumber(e.anonymousId);if(t)try{await this.bot.sendProactiveNudge(e.id,t,"mood_log"),r++,await new Promise(e=>setTimeout(e,1e3))}catch(t){console.error(`Failed to send mood reminder to user ${e.anonymousId}:`,t)}}console.log(`Sent mood reminders to ${r}/${n.length} users`)}catch(e){throw console.error("Error sending mood reminders:",e),e}}async sendAssessmentReminders(){try{let e=new Date(Date.now()-12096e5),t=(await i._.pHQ4Assessment.findMany({where:{completedAt:{gte:e}},select:{userId:!0},distinct:["userId"]})).map(e=>e.userId),n=await i._.anonymousUser.findMany({where:{isActive:!0,id:{notIn:t}},take:30}),r=0;for(let e of n){let t=await this.phoneService.getPhoneNumber(e.anonymousId);if(t)try{await this.bot.sendProactiveNudge(e.id,t,"assessment_reminder"),r++,await new Promise(e=>setTimeout(e,1e3))}catch(t){console.error(`Failed to send assessment reminder to user ${e.anonymousId}:`,t)}}console.log(`Sent assessment reminders to ${r}/${n.length} users`)}catch(e){throw console.error("Error sending assessment reminders:",e),e}}async sendWellnessTips(){try{let e=new Date(Date.now()-6048e5),t=await i._.anonymousUser.findMany({where:{isActive:!0,lastActiveAt:{gte:e}},take:100}),n=0;for(let e of t){let t=await this.phoneService.getPhoneNumber(e.anonymousId);if(t)try{await this.bot.sendProactiveNudge(e.id,t,"wellness_tip"),n++,await new Promise(e=>setTimeout(e,2e3))}catch(t){console.error(`Failed to send wellness tip to user ${e.anonymousId}:`,t)}}console.log(`Sent wellness tips to ${n}/${t.length} users`)}catch(e){throw console.error("Error sending wellness tips:",e),e}}async cleanupInactiveUsers(e=90){try{let t=new Date(Date.now()-864e5*e),n=await i._.anonymousUser.findMany({where:{lastActiveAt:{lt:t},isActive:!1},select:{anonymousId:!0}}),r=0;for(let e of n)try{await this.phoneService.deletePhoneMapping(e.anonymousId),r++}catch(t){console.error(`Failed to cleanup phone mapping for ${e.anonymousId}:`,t)}console.log(`Cleaned up ${r} inactive user phone mappings`)}catch(e){throw console.error("Error during phone mapping cleanup:",e),e}}}let h=new u;async function p(e,t){if("POST"!==e.method)return t.setHeader("Allow",["POST"]),t.status(405).end(`Method ${e.method} Not Allowed`);if(e.headers["x-api-key"]!==process.env.SCHEDULER_API_KEY)return t.status(401).json({error:"Unauthorized"});try{let{type:n}=e.body;switch(n){case"daily_checkins":await h.sendDailyCheckins();break;case"mood_reminders":await h.sendMoodReminders();break;case"assessment_reminders":await h.sendAssessmentReminders();break;case"wellness_tips":await h.sendWellnessTips();break;case"all":await h.sendDailyCheckins(),await h.sendMoodReminders(),await h.sendAssessmentReminders(),await h.sendWellnessTips();break;default:return t.status(400).json({error:"Invalid nudge type"})}t.status(200).json({success:!0,message:`${n} nudges sent successfully`})}catch(e){console.error("Error running scheduler:",e),t.status(500).json({error:"Failed to run scheduler"})}}let m=(0,a.l)(r,"default"),y=(0,a.l)(r,"config"),g=new s.PagesAPIRouteModule({definition:{kind:o.x.PAGES_API,page:"/api/scheduler/run-nudges",pathname:"/api/scheduler/run-nudges",bundlePath:"",filename:""},userland:r})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var n=e=>t(t.s=e),r=t.X(0,[4888],()=>n(4319));module.exports=r})();