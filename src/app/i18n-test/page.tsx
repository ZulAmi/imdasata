'use client';

import React, { useState } from 'react';
import Link from 'next/link';
import { Globe, MessageCircle, Heart, Brain, ArrowLeft } from 'lucide-react';

interface Language {
  code: string;
  name: string;
  flag: string;
}

interface Translation {
  [key: string]: string;
}

interface Translations {
  [languageCode: string]: Translation;
}

const languages: Language[] = [
  { code: 'en', name: 'English', flag: 'ЁЯЗ║ЁЯЗ╕' },
  { code: 'es', name: 'Espa├▒ol', flag: 'ЁЯЗкЁЯЗ╕' },
  { code: 'fr', name: 'Fran├зais', flag: 'ЁЯЗлЁЯЗ╖' },
  { code: 'zh', name: 'ф╕нцЦЗ', flag: 'ЁЯЗиЁЯЗ│' },
  { code: 'ar', name: '╪з┘Д╪╣╪▒╪и┘К╪й', flag: 'ЁЯЗ╕ЁЯЗж' },
  { code: 'hi', name: 'рд╣рд┐рдиреНрджреА', flag: 'ЁЯЗоЁЯЗ│' }
];

const translations: Translations = {
  en: {
    title: 'SATA - Mental Health Support',
    subtitle: 'Anonymous AI-powered mental health assistance',
    greeting: 'Hello! How are you feeling today?',
    crisisHelp: 'Crisis Support Available',
    chatNow: 'Start Anonymous Chat',
    takeAssessment: 'Mental Health Assessment',
    moodTracking: 'Track Your Mood',
    resources: 'Browse Resources',
    privacyNote: 'Your privacy is our priority. All conversations are completely anonymous.',
    supportText: 'We provide 24/7 support in multiple languages with cultural sensitivity.',
    featuresTitle: 'Our Features',
    feature1: 'Anonymous Chat Support',
    feature2: 'Crisis Detection & Response',
    feature3: 'Mood Pattern Analysis',
    feature4: 'Personalized Resources',
    backToHome: 'Back to Home'
  },
  es: {
    title: 'SATA - Apoyo de Salud Mental',
    subtitle: 'Asistencia an├│nima de salud mental impulsada por IA',
    greeting: '┬бHola! ┬┐C├│mo te sientes hoy?',
    crisisHelp: 'Apoyo en Crisis Disponible',
    chatNow: 'Iniciar Chat An├│nimo',
    takeAssessment: 'Evaluaci├│n de Salud Mental',
    moodTracking: 'Seguimiento del Estado de ├Бnimo',
    resources: 'Explorar Recursos',
    privacyNote: 'Tu privacidad es nuestra prioridad. Todas las conversaciones son completamente an├│nimas.',
    supportText: 'Brindamos apoyo 24/7 en m├║ltiples idiomas con sensibilidad cultural.',
    featuresTitle: 'Nuestras Caracter├нsticas',
    feature1: 'Soporte de Chat An├│nimo',
    feature2: 'Detecci├│n y Respuesta a Crisis',
    feature3: 'An├бlisis de Patrones de Humor',
    feature4: 'Recursos Personalizados',
    backToHome: 'Volver al Inicio'
  },
  fr: {
    title: 'SATA - Soutien en Sant├й Mentale',
    subtitle: 'Assistance anonyme en sant├й mentale aliment├йe par IA',
    greeting: 'Bonjour! Comment vous sentez-vous aujourd\'hui?',
    crisisHelp: 'Soutien de Crise Disponible',
    chatNow: 'Commencer un Chat Anonyme',
    takeAssessment: '├Йvaluation de Sant├й Mentale',
    moodTracking: 'Suivi de l\'Humeur',
    resources: 'Parcourir les Ressources',
    privacyNote: 'Votre vie priv├йe est notre priorit├й. Toutes les conversations sont compl├иtement anonymes.',
    supportText: 'Nous offrons un soutien 24/7 en plusieurs langues avec sensibilit├й culturelle.',
    featuresTitle: 'Nos Fonctionnalit├йs',
    feature1: 'Support de Chat Anonyme',
    feature2: 'D├йtection et R├йponse aux Crises',
    feature3: 'Analyse des Mod├иles d\'Humeur',
    feature4: 'Ressources Personnalis├йes',
    backToHome: 'Retour ├а l\'Accueil'
  },
  zh: {
    title: 'SATA - х┐ГчРЖхБех║╖цФпцМБ',
    subtitle: 'хМ┐хРНAIщй▒хКичЪДх┐ГчРЖхБех║╖цП┤хКй',
    greeting: 'цВихе╜я╝Бф╗КхдйцДЯшзЙхжВф╜Хя╝Я',
    crisisHelp: 'хН▒цЬ║цФпцМБхПпчФи',
    chatNow: 'х╝АхзЛхМ┐хРНшБКхдй',
    takeAssessment: 'х┐ГчРЖхБех║╖шпДф╝░',
    moodTracking: 'цГЕч╗кш┐╜ш╕к',
    resources: 'ц╡ПшзИш╡Дц║Р',
    privacyNote: 'цВичЪДщЪРчзБцШпцИСф╗мчЪДщжЦшжБф╗╗хКбуАВцЙАцЬЙхп╣шпЭщГ╜цШпхоМхЕихМ┐хРНчЪДуАВ',
    supportText: 'цИСф╗мцПРф╛Ы24/7хдЪшпншиАцФпцМБя╝МхЕ╖цЬЙцЦЗхМЦцХПцДЯцАзуАВ',
    featuresTitle: 'цИСф╗мчЪДхКЯшГ╜',
    feature1: 'хМ┐хРНшБКхдйцФпцМБ',
    feature2: 'хН▒цЬ║цгАц╡Лф╕ОхУНх║Ф',
    feature3: 'цГЕч╗кцибх╝ПхИЖцЮР',
    feature4: 'ф╕кцАзхМЦш╡Дц║Р',
    backToHome: 'ш┐ФхЫЮщжЦщб╡'
  },
  ar: {
    title: '╪│╪з╪к╪з - ╪п╪╣┘Е ╪з┘Д╪╡╪н╪й ╪з┘Д┘Ж┘Б╪│┘К╪й',
    subtitle: '┘Е╪│╪з╪╣╪п╪й ┘Е╪м┘З┘И┘Д╪й ┘Д┘Д╪╡╪н╪й ╪з┘Д┘Ж┘Б╪│┘К╪й ┘Е╪п╪╣┘И┘Е╪й ╪и╪з┘Д╪░┘Г╪з╪б ╪з┘Д╪з╪╡╪╖┘Ж╪з╪╣┘К',
    greeting: '┘Е╪▒╪н╪и╪з┘Л! ┘Г┘К┘Б ╪к╪┤╪╣╪▒ ╪з┘Д┘К┘И┘Е╪Я',
    crisisHelp: '╪п╪╣┘Е ╪з┘Д╪г╪▓┘Е╪з╪к ┘Е╪к╪з╪н',
    chatNow: '╪и╪п╪б ┘Е╪н╪з╪п╪л╪й ┘Е╪м┘З┘И┘Д╪й',
    takeAssessment: '╪к┘В┘К┘К┘Е ╪з┘Д╪╡╪н╪й ╪з┘Д┘Ж┘Б╪│┘К╪й',
    moodTracking: '╪к╪к╪и╪╣ ╪з┘Д┘Е╪▓╪з╪м',
    resources: '╪к╪╡┘Б╪н ╪з┘Д┘Е┘И╪з╪▒╪п',
    privacyNote: '╪о╪╡┘И╪╡┘К╪к┘Г ┘З┘К ╪г┘И┘Д┘И┘К╪к┘Ж╪з. ╪м┘Е┘К╪╣ ╪з┘Д┘Е╪н╪з╪п╪л╪з╪к ┘Е╪м┘З┘И┘Д╪й ╪к┘Е╪з┘Е╪з┘Л.',
    supportText: '┘Ж┘В╪п┘Е ╪п╪╣┘Е╪з┘Л ╪╣┘Д┘Й ┘Е╪п╪з╪▒ ╪з┘Д╪│╪з╪╣╪й ╪и╪╣╪п╪й ┘Д╪║╪з╪к ┘Е╪╣ ╪з┘Д╪н╪│╪з╪│┘К╪й ╪з┘Д╪л┘В╪з┘Б┘К╪й.',
    featuresTitle: '┘Е┘К╪▓╪з╪к┘Ж╪з',
    feature1: '╪п╪╣┘Е ╪з┘Д┘Е╪н╪з╪п╪л╪й ╪з┘Д┘Е╪м┘З┘И┘Д╪й',
    feature2: '╪з┘Г╪к╪┤╪з┘Б ╪з┘Д╪г╪▓┘Е╪з╪к ┘И╪з┘Д╪з╪│╪к╪м╪з╪и╪й',
    feature3: '╪к╪н┘Д┘К┘Д ╪г┘Ж┘Е╪з╪╖ ╪з┘Д┘Е╪▓╪з╪м',
    feature4: '┘Е┘И╪з╪▒╪п ┘Е╪о╪╡╪╡╪й',
    backToHome: '╪з┘Д╪╣┘И╪п╪й ┘Д┘Д╪▒╪ж┘К╪│┘К╪й'
  },
  hi: {
    title: 'SATA - рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрддрд╛',
    subtitle: 'рдЧреБрдордирд╛рдо AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрддрд╛',
    greeting: 'рдирдорд╕реНрддреЗ! рдЖрдЬ рдЖрдк рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?',
    crisisHelp: 'рд╕рдВрдХрдЯ рд╕рд╣рд╛рдпрддрд╛ рдЙрдкрд▓рдмреНрдз',
    chatNow: 'рдЧреБрдордирд╛рдо рдЪреИрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ',
    takeAssessment: 'рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдореВрд▓реНрдпрд╛рдВрдХрди',
    moodTracking: 'рдореВрдб рдЯреНрд░реИрдХрд┐рдВрдЧ',
    resources: 'рд╕рдВрд╕рд╛рдзрди рджреЗрдЦреЗрдВ',
    privacyNote: 'рдЖрдкрдХреА рдЧреЛрдкрдиреАрдпрддрд╛ рд╣рдорд╛рд░реА рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рд╣реИред рд╕рднреА рдмрд╛рддрдЪреАрдд рдкреВрд░реА рддрд░рд╣ рдЧреБрдордирд╛рдо рд╣реИрдВред',
    supportText: 'рд╣рдо рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рд╕рдВрд╡реЗрджрдирд╢реАрд▓рддрд╛ рдХреЗ рд╕рд╛рде рдХрдИ рднрд╛рд╖рд╛рдУрдВ рдореЗрдВ 24/7 рд╕рд╣рд╛рдпрддрд╛ рдкреНрд░рджрд╛рди рдХрд░рддреЗ рд╣реИрдВред',
    featuresTitle: 'рд╣рдорд╛рд░реА рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВ',
    feature1: 'рдЧреБрдордирд╛рдо рдЪреИрдЯ рд╕рд╣рд╛рдпрддрд╛',
    feature2: 'рд╕рдВрдХрдЯ рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдирд╛ рдФрд░ рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛',
    feature3: 'рдореВрдб рдкреИрдЯрд░реНрди рд╡рд┐рд╢реНрд▓реЗрд╖рдг',
    feature4: 'рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рдВрд╕рд╛рдзрди',
    backToHome: 'рдШрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдВ'
  }
};

export default function I18nTestPage() {
  const [currentLanguage, setCurrentLanguage] = useState<string>('en');
  const [isTransitioning, setIsTransitioning] = useState<boolean>(false);

  const t = (key: string): string => {
    return translations[currentLanguage]?.[key] || translations.en[key] || key;
  };

  const handleLanguageChange = (languageCode: string): void => {
    if (languageCode === currentLanguage) return;
    
    setIsTransitioning(true);
    setTimeout(() => {
      setCurrentLanguage(languageCode);
      setIsTransitioning(false);
    }, 150);
  };

  const isRTL = currentLanguage === 'ar';

  return (
    <div className={`min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 ${isRTL ? 'rtl' : 'ltr'}`}>
      {/* Language Selector */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Globe className="w-6 h-6 text-blue-600" />
              <h2 className="text-lg font-semibold text-gray-900">
                Language / Idioma / Langue / шпншиА / ┘Д╪║╪й / рднрд╛рд╖рд╛
              </h2>
            </div>
            <div className="flex flex-wrap gap-2">
              {languages.map((lang) => (
                <button
                  key={lang.code}
                  onClick={() => handleLanguageChange(lang.code)}
                  className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 flex items-center space-x-2 ${
                    currentLanguage === lang.code
                      ? 'bg-blue-600 text-white shadow-lg'
                      : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
                  }`}
                >
                  <span className="text-lg">{lang.flag}</span>
                  <span>{lang.name}</span>
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className={`max-w-6xl mx-auto px-4 py-12 transition-opacity duration-300 ${
        isTransitioning ? 'opacity-50' : 'opacity-100'
      }`}>
        {/* Hero Section */}
        <div className="text-center mb-12">
          <div className="flex justify-center mb-6">
            <div className="bg-white rounded-full p-6 shadow-lg">
              <Brain className="w-16 h-16 text-blue-600" />
            </div>
          </div>
          
          <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
            {t('title')}
          </h1>
          
          <p className="text-xl text-gray-600 mb-8 max-w-3xl mx-auto">
            {t('subtitle')}
          </p>

          <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-8">
            <div className="flex items-center justify-center mb-3">
              <MessageCircle className="w-8 h-8 text-blue-600 mr-3" />
              <span className="text-lg font-semibold text-blue-900">
                {t('greeting')}
              </span>
            </div>
            <p className="text-blue-700">
              {t('supportText')}
            </p>
          </div>
        </div>

        {/* Crisis Support Banner */}
        <div className="bg-red-50 border border-red-200 rounded-lg p-6 mb-12">
          <div className="flex items-center justify-center">
            <Heart className="w-6 h-6 text-red-600 mr-3" />
            <span className="text-red-800 font-semibold">
              {t('crisisHelp')}
            </span>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
          <Link
            href="/chat"
            className="bg-blue-600 hover:bg-blue-700 text-white p-6 rounded-lg text-center transition-all transform hover:scale-105 shadow-lg"
          >
            <MessageCircle className="w-8 h-8 mx-auto mb-3" />
            <span className="block font-semibold">{t('chatNow')}</span>
          </Link>

          <Link
            href="/assessment"
            className="bg-purple-600 hover:bg-purple-700 text-white p-6 rounded-lg text-center transition-all transform hover:scale-105 shadow-lg"
          >
            <Brain className="w-8 h-8 mx-auto mb-3" />
            <span className="block font-semibold">{t('takeAssessment')}</span>
          </Link>

          <Link
            href="/mood-tracking"
            className="bg-green-600 hover:bg-green-700 text-white p-6 rounded-lg text-center transition-all transform hover:scale-105 shadow-lg"
          >
            <Heart className="w-8 h-8 mx-auto mb-3" />
            <span className="block font-semibold">{t('moodTracking')}</span>
          </Link>

          <Link
            href="/resources"
            className="bg-orange-600 hover:bg-orange-700 text-white p-6 rounded-lg text-center transition-all transform hover:scale-105 shadow-lg"
          >
            <Globe className="w-8 h-8 mx-auto mb-3" />
            <span className="block font-semibold">{t('resources')}</span>
          </Link>
        </div>

        {/* Features Section */}
        <div className="bg-white rounded-lg shadow-lg p-8 mb-12">
          <h2 className="text-2xl font-bold text-center text-gray-900 mb-8">
            {t('featuresTitle')}
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="flex items-start space-x-4">
              <div className="bg-blue-100 rounded-lg p-3">
                <MessageCircle className="w-6 h-6 text-blue-600" />
              </div>
              <div>
                <h3 className="font-semibold text-gray-900 mb-2">{t('feature1')}</h3>
              </div>
            </div>

            <div className="flex items-start space-x-4">
              <div className="bg-red-100 rounded-lg p-3">
                <Heart className="w-6 h-6 text-red-600" />
              </div>
              <div>
                <h3 className="font-semibold text-gray-900 mb-2">{t('feature2')}</h3>
              </div>
            </div>

            <div className="flex items-start space-x-4">
              <div className="bg-purple-100 rounded-lg p-3">
                <Brain className="w-6 h-6 text-purple-600" />
              </div>
              <div>
                <h3 className="font-semibold text-gray-900 mb-2">{t('feature3')}</h3>
              </div>
            </div>

            <div className="flex items-start space-x-4">
              <div className="bg-green-100 rounded-lg p-3">
                <Globe className="w-6 h-6 text-green-600" />
              </div>
              <div>
                <h3 className="font-semibold text-gray-900 mb-2">{t('feature4')}</h3>
              </div>
            </div>
          </div>
        </div>

        {/* Privacy Notice */}
        <div className="bg-gray-50 border border-gray-200 rounded-lg p-6 mb-8">
          <p className="text-gray-700 text-center">
            {t('privacyNote')}
          </p>
        </div>

        {/* Back to Home */}
        <div className="text-center">
          <Link
            href="/"
            className="inline-flex items-center space-x-2 text-blue-600 hover:text-blue-700 font-medium"
          >
            <ArrowLeft className="w-5 h-5" />
            <span>{t('backToHome')}</span>
          </Link>
        </div>
      </div>
    </div>
  );
}