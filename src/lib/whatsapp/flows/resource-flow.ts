import { prisma } from '@/lib/prisma';
import { WhatsAppService } from '../service';

interface UserSession {
  userId: string;
  anonymousId: string;
  language: string;
  currentFlow: string;
  flowStep: number;
  context: Record<string, any>;
  lastActivity: Date;
  isNewUser: boolean;
}

interface FlowResponse {
  message: string;
  quickReplies?: string[];
  buttons?: Array<{id: string, title: string}>;
  nextFlow?: string;
  nextStep?: number;
  context?: Record<string, any>;
  shouldEndFlow?: boolean;
  priority?: 'low' | 'medium' | 'high' | 'critical';
}

export class ResourceFlow {
  constructor(private whatsapp: WhatsAppService) {}

  async handleMessage(text: string, session: UserSession): Promise<FlowResponse> {
    switch (session.flowStep) {
      case 0:
        return await this.showResourceCategories(session);
      case 1:
        return await this.handleCategorySelection(text, session);
      case 2:
        return await this.showSpecificResources(text, session);
      case 3:
        return await this.handleResourceAction(text, session);
      default:
        return await this.showResourceCategories(session);
    }
  }

  private async showResourceCategories(session: UserSession): Promise<FlowResponse> {
    return {
      message: this.getLocalizedText('resource_categories_intro', session.language),
      buttons: [
        { id: 'stress_anxiety', title: this.getLocalizedText('stress_anxiety_resources', session.language) },
        { id: 'depression', title: this.getLocalizedText('depression_resources', session.language) },
        { id: 'work_life', title: this.getLocalizedText('work_life_resources', session.language) },
        { id: 'crisis_support', title: this.getLocalizedText('crisis_support', session.language) },
        { id: 'self_care', title: this.getLocalizedText('self_care_resources', session.language) },
        { id: 'professional_help', title: this.getLocalizedText('professional_help', session.language) }
      ],
      nextStep: 1
    };
  }

  private async handleCategorySelection(text: string, session: UserSession): Promise<FlowResponse> {
    const lowerText = text.toLowerCase();
    let category = '';
    
    if (lowerText.includes('stress') || lowerText.includes('anxiety') || lowerText.includes('ÁÑ¶Ëôë') || lowerText.includes('‡¶â‡¶¶‡ßç‡¶¨‡ßá‡¶ó')) {
      category = 'stress_anxiety';
    } else if (lowerText.includes('depression') || lowerText.includes('ÊäëÈÉÅ') || lowerText.includes('‡¶¨‡¶ø‡¶∑‡¶£‡ßç‡¶£‡¶§‡¶æ')) {
      category = 'depression';
    } else if (lowerText.includes('work') || lowerText.includes('life') || lowerText.includes('Â∑•‰Ωú') || lowerText.includes('‡¶ï‡¶æ‡¶ú')) {
      category = 'work_life_balance';
    } else if (lowerText.includes('crisis') || lowerText.includes('emergency') || lowerText.includes('Âç±Êú∫') || lowerText.includes('‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø')) {
      category = 'crisis';
    } else if (lowerText.includes('self') || lowerText.includes('care') || lowerText.includes('Ëá™ÊàëÊä§ÁêÜ') || lowerText.includes('‡¶∏‡ßç‡¶¨-‡¶Ø‡¶§‡ßç‡¶®')) {
      category = 'self_care';
    } else if (lowerText.includes('professional') || lowerText.includes('counseling') || lowerText.includes('‰∏ì‰∏ö') || lowerText.includes('‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞')) {
      category = 'counseling';
    } else {
      // Default to general wellness
      category = 'wellness';
    }

    return await this.fetchAndDisplayResources(category, session);
  }

  private async fetchAndDisplayResources(category: string, session: UserSession): Promise<FlowResponse> {
    // Fetch resources from database
    const resources = await prisma.mentalHealthResource.findMany({
      where: {
        category: category,
        isActive: true,
        languages: { has: session.language }
      },
      orderBy: [
        { priority: 'desc' },
        { updatedAt: 'desc' }
      ],
      take: 5
    });

    if (resources.length === 0) {
      return {
        message: this.getLocalizedText('no_resources_found', session.language),
        buttons: [
          { id: 'try_another_category', title: this.getLocalizedText('try_another_category', session.language) },
          { id: 'request_resource', title: this.getLocalizedText('request_specific_resource', session.language) },
          { id: 'main_menu', title: this.getLocalizedText('main_menu', session.language) }
        ],
        nextFlow: 'idle',
        shouldEndFlow: true
      };
    }

    let resourcesMessage = this.getLocalizedText('available_resources', session.language) + '\n\n';
    
    resources.forEach((resource, index) => {
      const title = this.extractLocalizedField(resource.title, session.language);
      const description = this.extractLocalizedField(resource.description, session.language);
      const emoji = this.getCategoryEmoji(resource.category);
      
      resourcesMessage += `${emoji} ${index + 1}. **${title}**\n`;
      resourcesMessage += `${description.substring(0, 100)}${description.length > 100 ? '...' : ''}\n\n`;
    });

    // Log resource interaction
    await prisma.userInteraction.create({
      data: {
        userId: session.userId,
        interactionType: 'RESOURCE_BROWSED',
        entityType: 'resource_category',
        entityId: category,
        metadata: {
          category,
          resourceCount: resources.length,
          timestamp: new Date().toISOString()
        }
      }
    });

    return {
      message: resourcesMessage,
      quickReplies: resources.map((_, index) => `${index + 1}. ${this.getLocalizedText('view_details', session.language)}`),
      buttons: [
        { id: 'save_all', title: this.getLocalizedText('save_all_resources', session.language) },
        { id: 'share_resource', title: this.getLocalizedText('share_with_friend', session.language) },
        { id: 'back_to_categories', title: this.getLocalizedText('back_to_categories', session.language) }
      ],
      nextStep: 2,
      context: { category, resources: resources.map(r => ({ id: r.id, title: r.title, category: r.category })) }
    };
  }

  private async showSpecificResources(text: string, session: UserSession): Promise<FlowResponse> {
    const match = text.match(/^(\d+)/);
    if (!match) {
      return {
        message: this.getLocalizedText('invalid_selection', session.language),
        quickReplies: session.context.resources?.map((_: any, index: number) => `${index + 1}. ${this.getLocalizedText('view_details', session.language)}`) || [],
        nextStep: 2
      };
    }

    const resourceIndex = parseInt(match[1]) - 1;
    const resourceId = session.context.resources?.[resourceIndex]?.id;

    if (!resourceId) {
      return {
        message: this.getLocalizedText('resource_not_found', session.language),
        buttons: [
          { id: 'back_to_list', title: this.getLocalizedText('back_to_list', session.language) },
          { id: 'main_menu', title: this.getLocalizedText('main_menu', session.language) }
        ],
        nextStep: 1
      };
    }

    // Fetch detailed resource information
    const resource = await prisma.mentalHealthResource.findUnique({
      where: { id: resourceId }
    });

    if (!resource) {
      return {
        message: this.getLocalizedText('resource_not_found', session.language),
        nextStep: 1
      };
    }

    // Create detailed resource message
    const title = this.extractLocalizedField(resource.title, session.language);
    const description = this.extractLocalizedField(resource.description, session.language);
    const contactInfo = resource.contactInfo as any;
    const availability = resource.availability as any;

    let detailMessage = `üìã **${title}**\n\n`;
    detailMessage += `${description}\n\n`;
    
    if (contactInfo) {
      detailMessage += `üìû **${this.getLocalizedText('contact_info', session.language)}:**\n`;
      if (contactInfo.phone) detailMessage += `Phone: ${contactInfo.phone}\n`;
      if (contactInfo.email) detailMessage += `Email: ${contactInfo.email}\n`;
      if (contactInfo.website) detailMessage += `Website: ${contactInfo.website}\n`;
      if (contactInfo.address) detailMessage += `Address: ${contactInfo.address}\n`;
      detailMessage += '\n';
    }

    if (availability) {
      detailMessage += `üïê **${this.getLocalizedText('availability', session.language)}:**\n`;
      if (availability.hours) detailMessage += `Hours: ${availability.hours}\n`;
      if (availability.languages) detailMessage += `Languages: ${availability.languages.join(', ')}\n`;
      detailMessage += '\n';
    }

    if (resource.isFree) {
      detailMessage += `üí∞ ${this.getLocalizedText('free_service', session.language)}\n`;
    }

    if (resource.isEmergency) {
      detailMessage += `üö® ${this.getLocalizedText('emergency_service', session.language)}\n`;
    }

    // Log resource view
    await prisma.resourceInteraction.create({
      data: {
        userId: session.userId,
        resourceId: resource.id,
        language: session.language
      }
    });

    return {
      message: detailMessage,
      buttons: [
        { id: 'save_resource', title: this.getLocalizedText('save_resource', session.language) },
        { id: 'share_resource', title: this.getLocalizedText('share_resource', session.language) },
        { id: 'get_directions', title: this.getLocalizedText('get_directions', session.language) },
        { id: 'back_to_list', title: this.getLocalizedText('back_to_list', session.language) }
      ],
      nextStep: 3,
      context: { ...session.context, selectedResource: resource }
    };
  }

  private async handleResourceAction(text: string, session: UserSession): Promise<FlowResponse> {
    const lowerText = text.toLowerCase();
    const resource = session.context.selectedResource;

    if (lowerText.includes('save')) {
      return await this.saveResource(resource, session);
    } else if (lowerText.includes('share')) {
      return await this.shareResource(resource, session);
    } else if (lowerText.includes('directions') || lowerText.includes('location')) {
      return await this.getDirections(resource, session);
    } else if (lowerText.includes('back')) {
      return await this.fetchAndDisplayResources(session.context.category, session);
    } else {
      return {
        message: this.getLocalizedText('what_would_you_like_to_do', session.language),
        buttons: [
          { id: 'save_resource', title: this.getLocalizedText('save_resource', session.language) },
          { id: 'share_resource', title: this.getLocalizedText('share_resource', session.language) },
          { id: 'back_to_list', title: this.getLocalizedText('back_to_list', session.language) }
        ],
        nextStep: 3
      };
    }
  }

  private async saveResource(resource: any, session: UserSession): Promise<FlowResponse> {
    // Save resource interaction
    await prisma.resourceInteraction.create({
      data: {
        userId: session.userId,
        resourceId: resource.id,
        language: session.language,
        helpful: true
      }
    });

    // Award points for saving resource
    await this.awardPoints(session.userId, 5);

    return {
      message: this.getLocalizedText('resource_saved', session.language),
      buttons: [
        { id: 'view_saved_resources', title: this.getLocalizedText('view_saved_resources', session.language) },
        { id: 'find_more_resources', title: this.getLocalizedText('find_more_resources', session.language) },
        { id: 'main_menu', title: this.getLocalizedText('main_menu', session.language) }
      ],
      nextFlow: 'idle',
      shouldEndFlow: true
    };
  }

  private async shareResource(resource: any, session: UserSession): Promise<FlowResponse> {
    const title = this.extractLocalizedField(resource.title, session.language);
    const description = this.extractLocalizedField(resource.description, session.language);
    
    const shareMessage = `ü§ù ${this.getLocalizedText('shared_resource_intro', session.language)}\n\n` +
      `üìã **${title}**\n${description}\n\n` +
      `${this.getLocalizedText('shared_via_sata', session.language)}`;

    // Log sharing action
    await prisma.resourceInteraction.create({
      data: {
        userId: session.userId,
        resourceId: resource.id,
        language: session.language
      }
    });

    return {
      message: shareMessage,
      buttons: [
        { id: 'share_another', title: this.getLocalizedText('share_another_resource', session.language) },
        { id: 'back_to_list', title: this.getLocalizedText('back_to_list', session.language) },
        { id: 'main_menu', title: this.getLocalizedText('main_menu', session.language) }
      ],
      nextFlow: 'idle',
      shouldEndFlow: true
    };
  }

  private async getDirections(resource: any, session: UserSession): Promise<FlowResponse> {
    const contactInfo = resource.contactInfo as any;
    
    if (!contactInfo?.address) {
      return {
        message: this.getLocalizedText('no_address_available', session.language),
        buttons: [
          { id: 'contact_directly', title: this.getLocalizedText('contact_directly', session.language) },
          { id: 'back_to_resource', title: this.getLocalizedText('back_to_resource', session.language) }
        ],
        nextStep: 3
      };
    }

    // Create Google Maps link
    const mapsUrl = `https://maps.google.com/maps?q=${encodeURIComponent(contactInfo.address)}`;
    
    return {
      message: `üó∫Ô∏è ${this.getLocalizedText('directions_info', session.language)}\n\n` +
        `üìç **${this.getLocalizedText('address', session.language)}:** ${contactInfo.address}\n\n` +
        `üîó ${this.getLocalizedText('open_in_maps', session.language)}: ${mapsUrl}`,
      buttons: [
        { id: 'contact_resource', title: this.getLocalizedText('contact_resource', session.language) },
        { id: 'back_to_resource', title: this.getLocalizedText('back_to_resource', session.language) },
        { id: 'main_menu', title: this.getLocalizedText('main_menu', session.language) }
      ],
      nextFlow: 'idle',
      shouldEndFlow: true
    };
  }

  private extractLocalizedField(field: any, language: string): string {
    if (!field || typeof field !== 'object') return '';
    return field[language] || field.en || 'Content not available';
  }

  private getCategoryEmoji(category: string): string {
    const emojiMap: Record<string, string> = {
      stress_anxiety: 'üò∞',
      depression: 'üòî',
      work_life_balance: '‚öñÔ∏è',
      crisis: 'üö®',
      self_care: 'üßò',
      counseling: 'üí¨',
      wellness: 'üåü',
      support_groups: 'üë•'
    };
    return emojiMap[category] || 'üìã';
  }

  private async awardPoints(userId: string, points: number): Promise<void> {
    await prisma.gamificationData.upsert({
      where: { userId },
      update: {
        totalPoints: { increment: points },
        updatedAt: new Date()
      },
      create: {
        userId,
        totalPoints: points,
        level: 1,
        streak: 1
      }
    });
  }

  private getLocalizedText(key: string, language: string): string {
    const texts: Record<string, Record<string, string>> = {
      resource_categories_intro: {
        en: "üìö Mental Health Resources\n\nI can help you find resources and support for various mental health topics. What area would you like to explore?",
        zh: "üìö ÂøÉÁêÜÂÅ•Â∫∑ËµÑÊ∫ê\n\nÊàëÂèØ‰ª•Â∏ÆÂä©ÊÇ®ÊâæÂà∞ÂêÑÁßçÂøÉÁêÜÂÅ•Â∫∑‰∏ªÈ¢òÁöÑËµÑÊ∫êÂíåÊîØÊåÅ„ÄÇÊÇ®ÊÉ≥Êé¢Á¥¢Âì™‰∏™È¢ÜÂüüÔºü",
        bn: "üìö ‡¶Æ‡¶æ‡¶®‡¶∏‡¶ø‡¶ï ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶∏‡ßç‡¶•‡¶æ‡¶®\n\n‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶Æ‡¶æ‡¶®‡¶∏‡¶ø‡¶ï ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶® ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞ ‡¶Ö‡¶®‡ßç‡¶¨‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?",
        ta: "üìö ‡ÆÆ‡Æ© ‡Æ®‡Æ≤ ‡Æµ‡Æ≥‡Æô‡Øç‡Æï‡Æ≥‡Øç\n\n‡Æ™‡Æ≤‡Øç‡Æµ‡Øá‡Æ±‡ØÅ ‡ÆÆ‡Æ© ‡Æ®‡Æ≤ ‡Æ§‡Æ≤‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æ© ‡Æµ‡Æ≥‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡ÆÜ‡Æ§‡Æ∞‡Æµ‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡Æ±‡Æø‡ÆØ ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç. ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ®‡Øç‡Æ§‡Æ™‡Øç ‡Æ™‡Æï‡ØÅ‡Æ§‡Æø‡ÆØ‡Øà ‡ÆÜ‡Æ∞‡Ææ‡ÆØ ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç?",
        my: "üìö ·ÄÖ·Ä≠·Äê·Ä∫·ÄÄ·Äª·Äî·Ä∫·Ä∏·Äô·Ä¨·Äõ·Ä±·Ä∏ ·Ä°·Äõ·ÄÑ·Ä∫·Ä∏·Ä°·Äô·Äº·ÄÖ·Ä∫·Äô·Äª·Ä¨·Ä∏\n\n·ÄÖ·Ä≠·Äê·Ä∫·ÄÄ·Äª·Äî·Ä∫·Ä∏·Äô·Ä¨·Äõ·Ä±·Ä∏ ·ÄÅ·Ä±·Ä´·ÄÑ·Ä∫·Ä∏·ÄÖ·Äâ·Ä∫·Ä°·Äô·Äª·Ä≠·ÄØ·Ä∏·Äô·Äª·Ä≠·ÄØ·Ä∏·Ä°·Äê·ÄΩ·ÄÄ·Ä∫ ·Ä°·Äõ·ÄÑ·Ä∫·Ä∏·Ä°·Äô·Äº·ÄÖ·Ä∫·Äô·Äª·Ä¨·Ä∏·Äî·Äæ·ÄÑ·Ä∑·Ä∫ ·Ä°·ÄÄ·Ä∞·Ä°·Ää·ÄÆ·Äô·Äª·Ä¨·Ä∏ ·Äõ·Äæ·Ä¨·Äñ·ÄΩ·Ä±·Äõ·Ä¨·Äê·ÄΩ·ÄÑ·Ä∫ ·ÄÄ·Äª·ÄΩ·Äî·Ä∫·Äê·Ä±·Ä¨·Ä∫ ·Äû·ÄÑ·Ä∑·Ä∫·ÄÄ·Ä≠·ÄØ ·ÄÄ·Ä∞·Ää·ÄÆ·Äî·Ä≠·ÄØ·ÄÑ·Ä∫·Äï·Ä´·Äê·Äö·Ä∫·Åã ·Äò·Äö·Ä∫·Äî·Äö·Ä∫·Äï·Äö·Ä∫·ÄÄ·Ä≠·ÄØ ·Äú·Ä±·Ä∑·Äú·Ä¨·ÄÅ·Äª·ÄÑ·Ä∫·Äï·Ä´·Äû·Äú·Ä≤?",
        id: "üìö Sumber Daya Kesehatan Mental\n\nSaya dapat membantu Anda menemukan sumber daya dan dukungan untuk berbagai topik kesehatan mental. Area mana yang ingin Anda jelajahi?"
      },
      stress_anxiety_resources: {
        en: "üò∞ Stress & Anxiety",
        zh: "üò∞ ÂéãÂäõ‰∏éÁÑ¶Ëôë",
        bn: "üò∞ ‡¶ö‡¶æ‡¶™ ‡¶ì ‡¶â‡¶¶‡ßç‡¶¨‡ßá‡¶ó",
        ta: "üò∞ ‡ÆÆ‡Æ© ‡ÆÖ‡Æ¥‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç & ‡Æï‡Æµ‡Æ≤‡Øà",
        my: "üò∞ ·ÄÖ·Ä≠·Äê·Ä∫·Äñ·Ä≠·ÄÖ·ÄÆ·Ä∏·Äô·Äæ·ÄØ·Äî·Äæ·ÄÑ·Ä∑·Ä∫ ·ÄÖ·Ä≠·ÄØ·Ä∏·Äõ·Ä≠·Äô·Ä∫·Äô·Äæ·ÄØ",
        id: "üò∞ Stres & Kecemasan"
      },
      depression_resources: {
        en: "üòî Depression Support",
        zh: "üòî ÊäëÈÉÅÁóáÊîØÊåÅ",
        bn: "üòî ‡¶¨‡¶ø‡¶∑‡¶£‡ßç‡¶®‡¶§‡¶æ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ",
        ta: "üòî ‡ÆÆ‡Æ©‡Æö‡Øç‡Æö‡Øã‡Æ∞‡Øç‡Æµ‡ØÅ ‡ÆÜ‡Æ§‡Æ∞‡Æµ‡ØÅ",
        my: "üòî ·ÄÖ·Ä≠·Äê·Ä∫·Äì·Ä¨·Äê·Ä∫·ÄÄ·Äª·Äô·Äæ·ÄØ ·Ä°·ÄÄ·Ä∞·Ä°·Ää·ÄÆ",
        id: "üòî Dukungan Depresi"
      },
      work_life_resources: {
        en: "‚öñÔ∏è Work-Life Balance",
        zh: "‚öñÔ∏è Â∑•‰ΩúÁîüÊ¥ªÂπ≥Ë°°",
        bn: "‚öñÔ∏è ‡¶ï‡¶æ‡¶ú-‡¶ú‡ßÄ‡¶¨‡¶®‡ßá‡¶∞ ‡¶≠‡¶æ‡¶∞‡¶∏‡¶æ‡¶Æ‡ßç‡¶Ø",
        ta: "‚öñÔ∏è ‡Æµ‡Øá‡Æ≤‡Øà-‡Æµ‡Ææ‡Æ¥‡Øç‡Æï‡Øç‡Æï‡Øà ‡Æö‡ÆÆ‡Æ®‡Æø‡Æ≤‡Øà",
        my: "‚öñÔ∏è ·Ä°·Äú·ÄØ·Äï·Ä∫-·Äò·Äù ·Äü·Äî·Ä∫·ÄÅ·Äª·ÄÄ·Ä∫",
        id: "‚öñÔ∏è Keseimbangan Kerja-Hidup"
      },
      crisis_support: {
        en: "üö® Crisis Support",
        zh: "üö® Âç±Êú∫ÊîØÊåÅ",
        bn: "üö® ‡¶∏‡¶Ç‡¶ï‡¶ü ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ",
        ta: "üö® ‡Æ®‡ØÜ‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æü‡Æø ‡ÆÜ‡Æ§‡Æ∞‡Æµ‡ØÅ",
        my: "üö® ·Ä°·ÄÄ·Äº·Äï·Ä∫·Ä°·Äê·Ää·Ä∫·Ä∏ ·Ä°·ÄÄ·Ä∞·Ä°·Ää·ÄÆ",
        id: "üö® Dukungan Krisis"
      },
      self_care_resources: {
        en: "üßò Self-Care & Wellness",
        zh: "üßò Ëá™ÊàëÊä§ÁêÜ‰∏éÂÅ•Â∫∑",
        bn: "üßò ‡¶∏‡ßç‡¶¨-‡¶Ø‡¶§‡ßç‡¶® ‡¶ì ‡¶∏‡ßÅ‡¶∏‡ßç‡¶•‡¶§‡¶æ",
        ta: "üßò ‡Æö‡ØÅ‡ÆØ ‡Æ™‡Æ∞‡Ææ‡ÆÆ‡Æ∞‡Æø‡Æ™‡Øç‡Æ™‡ØÅ & ‡Æ®‡Æ≤‡Øç‡Æµ‡Ææ‡Æ¥‡Øç‡Æµ‡ØÅ",
        my: "üßò ·Äô·Ä≠·Äô·Ä≠·ÄÄ·Ä≠·ÄØ·Äö·Ä∫·ÄÄ·Ä≠·ÄØ ·Äï·Äº·ÄØ·ÄÖ·ÄØ·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏·Äî·Äæ·ÄÑ·Ä∑·Ä∫ ·ÄÄ·Äª·Äî·Ä∫·Ä∏·Äô·Ä¨·Äõ·Ä±·Ä∏",
        id: "üßò Perawatan Diri & Kesehatan"
      },
      professional_help: {
        en: "üí¨ Professional Counseling",
        zh: "üí¨ ‰∏ì‰∏öÂí®ËØ¢",
        bn: "üí¨ ‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂",
        ta: "üí¨ ‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç‡ÆÆ‡ØÅ‡Æ±‡Øà ‡ÆÜ‡Æ≤‡Øã‡Æö‡Æ©‡Øà",
        my: "üí¨ ·Äï·Äõ·Ä±·Ä¨·Ä∫·Äñ·ÄÄ·Ä∫·Äõ·Äæ·ÄÑ·Ä∫·Äî·Äö·Ä∫ ·Ä°·ÄÄ·Äº·Ä∂·Äï·Ä±·Ä∏·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏",
        id: "üí¨ Konseling Profesional"
      },
      available_resources: {
        en: "Here are the available resources:",
        zh: "‰ª•‰∏ãÊòØÂèØÁî®ÁöÑËµÑÊ∫êÔºö",
        bn: "‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶∏‡¶Ç‡¶∏‡ßç‡¶•‡¶æ‡¶®‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá:",
        ta: "‡Æá‡Æô‡Øç‡Æï‡Øá ‡Æï‡Æø‡Æü‡Øà‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æ≥‡Æô‡Øç‡Æï‡Æ≥‡Øç:",
        my: "·Äõ·Äõ·Äæ·Ä≠·Äî·Ä≠·ÄØ·ÄÑ·Ä∫·Äû·Ä±·Ä¨ ·Ä°·Äõ·ÄÑ·Ä∫·Ä∏·Ä°·Äô·Äº·ÄÖ·Ä∫·Äô·Äª·Ä¨·Ä∏:",
        id: "Berikut adalah sumber daya yang tersedia:"
      },
      no_resources_found: {
        en: "ü§î No resources found for this category. Let me help you find alternatives or you can request specific resources.",
        zh: "ü§î Êú™ÊâæÂà∞Ê≠§Á±ªÂà´ÁöÑËµÑÊ∫ê„ÄÇËÆ©ÊàëÂ∏ÆÊÇ®ÊâæÂà∞Êõø‰ª£ÊñπÊ°àÔºåÊàñËÄÖÊÇ®ÂèØ‰ª•ËØ∑Ê±ÇÁâπÂÆöËµÑÊ∫ê„ÄÇ",
        bn: "ü§î ‡¶è‡¶á ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶® ‡¶∏‡¶Ç‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶¨‡¶ø‡¶ï‡¶≤‡ßç‡¶™ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶ø ‡¶¨‡¶æ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶Ç‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§",
        ta: "ü§î ‡Æá‡Æ®‡Øç‡Æ§ ‡Æµ‡Æï‡Øà‡Æï‡Øç‡Æï‡Ææ‡Æ© ‡Æµ‡Æ≥‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æø‡Æü‡Øà‡Æï‡Øç‡Æï‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà. ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡Æ±‡Æø‡ÆØ ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æ§‡Æµ‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Øç‡Æü ‡Æµ‡Æ≥‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Øã‡Æ∞‡Æ≤‡Ææ‡ÆÆ‡Øç.",
        my: "ü§î ·Äí·ÄÆ·Ä°·Äô·Äª·Ä≠·ÄØ·Ä∏·Ä°·ÄÖ·Ä¨·Ä∏·Ä°·Äê·ÄΩ·ÄÄ·Ä∫ ·Ä°·Äõ·ÄÑ·Ä∫·Ä∏·Ä°·Äô·Äº·ÄÖ·Ä∫·Äô·Äª·Ä¨·Ä∏ ·Äô·Äê·ÄΩ·Ä±·Ä∑·Äõ·Äï·Ä´·Åã ·Ä°·ÄÅ·Äº·Ä¨·Ä∏·Äõ·ÄΩ·Ä±·Ä∏·ÄÅ·Äª·Äö·Ä∫·ÄÖ·Äõ·Ä¨·Äô·Äª·Ä¨·Ä∏ ·Äõ·Äæ·Ä¨·Äñ·ÄΩ·Ä±·Äõ·Ä¨·Äê·ÄΩ·ÄÑ·Ä∫ ·ÄÄ·Äª·ÄΩ·Äî·Ä∫·Äê·Ä±·Ä¨·Ä∫ ·Äû·ÄÑ·Ä∑·Ä∫·ÄÄ·Ä≠·ÄØ ·ÄÄ·Ä∞·Ää·ÄÆ·Äï·Ä´·Äô·Äö·Ä∫ ·Äû·Ä≠·ÄØ·Ä∑·Äô·Äü·ÄØ·Äê·Ä∫ ·Äû·ÄÑ·Ä∫ ·Äû·Äê·Ä∫·Äô·Äæ·Äê·Ä∫·Äë·Ä¨·Ä∏·Äû·Ä±·Ä¨ ·Ä°·Äõ·ÄÑ·Ä∫·Ä∏·Ä°·Äô·Äº·ÄÖ·Ä∫·Äô·Äª·Ä¨·Ä∏·ÄÄ·Ä≠·ÄØ ·Äê·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·ÄÜ·Ä≠·ÄØ·Äî·Ä≠·ÄØ·ÄÑ·Ä∫·Äï·Ä´·Äê·Äö·Ä∫·Åã",
        id: "ü§î Tidak ada sumber daya yang ditemukan untuk kategori ini. Biarkan saya membantu Anda menemukan alternatif atau Anda dapat meminta sumber daya spesifik."
      },
      view_details: {
        en: "View Details",
        zh: "Êü•ÁúãËØ¶ÊÉÖ",
        bn: "‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®",
        ta: "‡Æµ‡Æø‡Æµ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        my: "·Ä°·Äû·Ä±·Ä∏·ÄÖ·Ä≠·Äê·Ä∫ ·ÄÄ·Äº·Ää·Ä∑·Ä∫·Äõ·Äæ·ÄØ·Äï·Ä´",
        id: "Lihat Detail"
      },
      save_resource: {
        en: "üíæ Save Resource",
        zh: "üíæ ‰øùÂ≠òËµÑÊ∫ê",
        bn: "üíæ ‡¶∏‡¶Ç‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®",
        ta: "üíæ ‡Æµ‡Æ≥‡Æ§‡Øç‡Æ§‡Øà‡Æö‡Øç ‡Æö‡Øá‡ÆÆ‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        my: "üíæ ·Ä°·Äõ·ÄÑ·Ä∫·Ä∏·Ä°·Äô·Äº·ÄÖ·Ä∫ ·Äû·Ä≠·Äô·Ä∫·Ä∏·ÄÜ·Ää·Ä∫·Ä∏·Äï·Ä´",
        id: "üíæ Simpan Sumber Daya"
      },
      share_resource: {
        en: "üì§ Share Resource",
        zh: "üì§ ÂàÜ‰∫´ËµÑÊ∫ê",
        bn: "üì§ ‡¶∏‡¶Ç‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®",
        ta: "üì§ ‡Æµ‡Æ≥‡Æ§‡Øç‡Æ§‡Øà‡Æ™‡Øç ‡Æ™‡Æï‡Æø‡Æ∞‡Æµ‡ØÅ‡ÆÆ‡Øç",
        my: "üì§ ·Ä°·Äõ·ÄÑ·Ä∫·Ä∏·Ä°·Äô·Äº·ÄÖ·Ä∫ ·Äô·Äª·Äæ·Äù·Ä±·Äï·Ä´",
        id: "üì§ Bagikan Sumber Daya"
      },
      resource_saved: {
        en: "‚úÖ Resource saved successfully! You've earned 5 wellness points.\n\nYou can access your saved resources anytime from the main menu.",
        zh: "‚úÖ ËµÑÊ∫ê‰øùÂ≠òÊàêÂäüÔºÅÊÇ®Ëé∑Âæó‰∫Ü5‰∏™ÂÅ•Â∫∑ÁßØÂàÜ„ÄÇ\n\nÊÇ®ÂèØ‰ª•ÈöèÊó∂‰ªé‰∏ªËèúÂçïËÆøÈóÆÂ∑≤‰øùÂ≠òÁöÑËµÑÊ∫ê„ÄÇ",
        bn: "‚úÖ ‡¶∏‡¶Ç‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Ü‡¶™‡¶®‡¶ø 5‡¶ü‡¶ø ‡¶∏‡ßÅ‡¶∏‡ßç‡¶•‡¶§‡¶æ‡¶∞ ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶Ö‡¶∞‡ßç‡¶ú‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§\n\n‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ø‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶∏‡¶Ç‡¶∏‡ßç‡¶•‡¶æ‡¶®‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§",
        ta: "‚úÖ ‡Æµ‡Æ≥‡ÆÆ‡Øç ‡Æµ‡ØÜ‡Æ±‡Øç‡Æ±‡Æø‡Æï‡Æ∞‡ÆÆ‡Ææ‡Æï ‡Æö‡Øá‡ÆÆ‡Æø‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ! ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç 5 ‡Æ®‡Æ≤‡Øç‡Æµ‡Ææ‡Æ¥‡Øç‡Æµ‡ØÅ ‡Æ™‡ØÅ‡Æ≥‡Øç‡Æ≥‡Æø‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡ØÜ‡Æ±‡Øç‡Æ±‡ØÅ‡Æ≥‡Øç‡Æ≥‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç.\n\n‡ÆÆ‡ØÅ‡Æ§‡Æ©‡Øç‡ÆÆ‡Øà ‡ÆÆ‡ØÜ‡Æ©‡ØÅ‡Æµ‡Æø‡Æ≤‡Æø‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æé‡Æ®‡Øç‡Æ§ ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡Øá‡ÆÆ‡Æø‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æµ‡Æ≥‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æ≤‡Ææ‡ÆÆ‡Øç.",
        my: "‚úÖ ·Ä°·Äõ·ÄÑ·Ä∫·Ä∏·Ä°·Äô·Äº·ÄÖ·Ä∫ ·Ä°·Ä±·Ä¨·ÄÑ·Ä∫·Äô·Äº·ÄÑ·Ä∫·ÄÖ·ÄΩ·Ä¨ ·Äû·Ä≠·Äô·Ä∫·Ä∏·ÄÜ·Ää·Ä∫·Ä∏·Äï·Äº·ÄÆ·Ä∏·Äï·Ä´·Äï·Äº·ÄÆ! ·Äû·ÄÑ·Ä∫ ·ÄÄ·Äª·Äî·Ä∫·Ä∏·Äô·Ä¨·Äõ·Ä±·Ä∏ ·Ä°·Äô·Äæ·Äê·Ä∫ 5 ·Äõ·Äõ·Äæ·Ä≠·ÄÅ·Ä≤·Ä∑·Äï·Ä´·Äê·Äö·Ä∫·Åã\n\n·Äï·ÄÑ·Ä∫·Äô·Äô·ÄÆ·Äî·Ä∞·Ä∏·Äô·Äæ ·Äû·ÄÑ·Ä∑·Ä∫·Äõ·Ä≤·Ä∑ ·Äû·Ä≠·Äô·Ä∫·Ä∏·ÄÜ·Ää·Ä∫·Ä∏·Äë·Ä¨·Ä∏·Äû·Ä±·Ä¨ ·Ä°·Äõ·ÄÑ·Ä∫·Ä∏·Ä°·Äô·Äº·ÄÖ·Ä∫·Äô·Äª·Ä¨·Ä∏·ÄÄ·Ä≠·ÄØ ·Ä°·ÄÅ·Äª·Ä≠·Äî·Ä∫·Äô·Äõ·ÄΩ·Ä±·Ä∏ ·Äù·ÄÑ·Ä∫·Äõ·Ä±·Ä¨·ÄÄ·Ä∫·ÄÄ·Äº·Ää·Ä∑·Ä∫·Äõ·Äæ·ÄØ·Äî·Ä≠·ÄØ·ÄÑ·Ä∫·Äï·Ä´·Äê·Äö·Ä∫·Åã",
        id: "‚úÖ Sumber daya berhasil disimpan! Anda telah mendapatkan 5 poin kesehatan.\n\nAnda dapat mengakses sumber daya yang disimpan kapan saja dari menu utama."
      },
      main_menu: {
        en: "üè† Main Menu",
        zh: "üè† ‰∏ªËèúÂçï",
        bn: "üè† ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ",
        ta: "üè† ‡ÆÆ‡ØÅ‡Æ§‡Æ©‡Øç‡ÆÆ‡Øà ‡ÆÆ‡ØÜ‡Æ©‡ØÅ",
        my: "üè† ·Äï·ÄÑ·Ä∫·Äô ·Äô·ÄÆ·Äî·Ä∞·Ä∏",
        id: "üè† Menu Utama"
      }
    };

    const textSet = texts[key];
    if (!textSet) return key;
    
    return textSet[language] || textSet.en || key;
  }
}
