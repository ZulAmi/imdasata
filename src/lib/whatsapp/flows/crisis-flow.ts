import { prisma } from '@/lib/prisma';
import { WhatsAppService } from '../service';

interface UserSession {
  userId: string;
  anonymousId: string;
  language: string;
  currentFlow: string;
  flowStep: number;
  context: Record<string, any>;
  lastActivity: Date;
  isNewUser: boolean;
}

interface FlowResponse {
  message: string;
  quickReplies?: string[];
  buttons?: Array<{id: string, title: string}>;
  nextFlow?: string;
  nextStep?: number;
  context?: Record<string, any>;
  shouldEndFlow?: boolean;
  priority?: 'low' | 'medium' | 'high' | 'critical';
}

export class CrisisFlow {
  constructor(private whatsapp: WhatsAppService) {}

  async handleMessage(text: string, session: UserSession): Promise<FlowResponse> {
    switch (session.flowStep) {
      case 0:
        return await this.immediateResponse(session);
      case 1:
        return await this.safetyCheck(text, session);
      case 2:
        return await this.provideCrisisResources(session);
      case 3:
        return await this.followUpSupport(text, session);
      default:
        return await this.immediateResponse(session);
    }
  }

  private async immediateResponse(session: UserSession): Promise<FlowResponse> {
    // Log crisis intervention
    await prisma.userInteraction.create({
      data: {
        userId: session.userId,
        interactionType: 'CRISIS_INTERVENTION',
        entityType: 'crisis_alert',
        entityId: `crisis_${Date.now()}`,
        metadata: {
          triggeredAt: new Date().toISOString(),
          language: session.language,
          originalMessage: session.context.originalMessage || 'crisis_detected'
        }
      }
    });

    return {
      message: this.getLocalizedText('crisis_immediate_response', session.language),
      quickReplies: [
        this.getLocalizedText('crisis_safe_now', session.language),
        this.getLocalizedText('crisis_need_help', session.language),
        this.getLocalizedText('crisis_someone_else', session.language)
      ],
      nextStep: 1,
      priority: 'critical'
    };
  }

  private async safetyCheck(text: string, session: UserSession): Promise<FlowResponse> {
    const lowerText = text.toLowerCase();
    
    if (lowerText.includes('safe') || lowerText.includes('okay') || lowerText.includes('ÂÆâÂÖ®') || lowerText.includes('‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶')) {
      return {
        message: this.getLocalizedText('crisis_glad_safe', session.language),
        quickReplies: [
          this.getLocalizedText('crisis_talk_more', session.language),
          this.getLocalizedText('crisis_get_resources', session.language)
        ],
        nextStep: 2
      };
    } else if (lowerText.includes('help') || lowerText.includes('emergency') || lowerText.includes('Â∏ÆÂä©') || lowerText.includes('‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø')) {
      return await this.immediateHelp(session);
    } else {
      return await this.provideCrisisResources(session);
    }
  }

  private async immediateHelp(session: UserSession): Promise<FlowResponse> {
    // Create high-priority service referral
    await this.createCrisisReferral(session);

    return {
      message: this.getLocalizedText('crisis_immediate_help', session.language),
      buttons: [
        { id: 'call_emergency', title: this.getLocalizedText('call_emergency', session.language) },
        { id: 'crisis_chat', title: this.getLocalizedText('crisis_chat', session.language) },
        { id: 'safety_plan', title: this.getLocalizedText('safety_plan', session.language) }
      ],
      nextStep: 3,
      priority: 'critical'
    };
  }

  private async provideCrisisResources(session: UserSession): Promise<FlowResponse> {
    // Get crisis resources based on user's location/language
    const crisisResources = await prisma.mentalHealthResource.findMany({
      where: {
        category: 'CRISIS_SUPPORT',
        languages: {
          has: session.language
        },
        isActive: true
      },
      orderBy: {
        priority: 'desc'
      },
      take: 5
    });

    let resourceMessage = this.getLocalizedText('crisis_resources_intro', session.language) + '\n\n';
    
    crisisResources.forEach((resource, index) => {
      const title = this.getLocalizedField(resource.title, session.language);
      const description = this.getLocalizedField(resource.description, session.language);
      
      resourceMessage += `${index + 1}. **${title}**\n`;
      resourceMessage += `   ${description}\n`;
      
      // Extract contact info from contactInfo JSON field
      const contactInfo = resource.contactInfo as any;
      if (contactInfo && typeof contactInfo === 'object') {
        if (contactInfo.phone) {
          resourceMessage += `   üìû ${contactInfo.phone}\n`;
        }
        if (contactInfo.website) {
          resourceMessage += `   üåê ${contactInfo.website}\n`;
        }
      }
      resourceMessage += '\n';
    });

    // Save crisis resource access
    await this.logCrisisResourceAccess(session, crisisResources.map(r => r.id));

    return {
      message: resourceMessage,
      buttons: [
        { id: 'call_hotline', title: this.getLocalizedText('call_hotline', session.language) },
        { id: 'safety_planning', title: this.getLocalizedText('create_safety_plan', session.language) },
        { id: 'professional_help', title: this.getLocalizedText('find_professional', session.language) },
        { id: 'followup_check', title: this.getLocalizedText('schedule_followup', session.language) }
      ],
      nextStep: 3,
      priority: 'high'
    };
  }

  private async followUpSupport(text: string, session: UserSession): Promise<FlowResponse> {
    const lowerText = text.toLowerCase();

    if (lowerText.includes('call') || lowerText.includes('hotline') || lowerText.includes('ÁîµËØù') || lowerText.includes('‡¶´‡ßã‡¶®')) {
      return this.provideHotlineInfo(session);
    } else if (lowerText.includes('safety') || lowerText.includes('plan') || lowerText.includes('ÂÆâÂÖ®') || lowerText.includes('‡¶™‡¶∞‡¶ø‡¶ï‡¶≤‡ßç‡¶™‡¶®‡¶æ')) {
      return this.createSafetyPlan(session);
    } else if (lowerText.includes('professional') || lowerText.includes('therapy') || lowerText.includes('‰∏ì‰∏ö') || lowerText.includes('‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞')) {
      return this.findProfessionalHelp(session);
    } else if (lowerText.includes('followup') || lowerText.includes('check') || lowerText.includes('Ë∑üËøõ') || lowerText.includes('‡¶´‡¶≤‡ßã‡¶Ü‡¶™')) {
      return this.scheduleFollowUp(session);
    } else {
      return this.continueSupport(session);
    }
  }

  private provideHotlineInfo(session: UserSession): FlowResponse {
    return {
      message: this.getLocalizedText('hotline_info', session.language),
      buttons: [
        { id: 'back_to_resources', title: this.getLocalizedText('back_to_resources', session.language) },
        { id: 'main_menu', title: this.getLocalizedText('main_menu', session.language) }
      ],
      shouldEndFlow: true,
      priority: 'high'
    };
  }

  private async createSafetyPlan(session: UserSession): Promise<FlowResponse> {
    // Create a basic safety plan record
    await prisma.userInteraction.create({
      data: {
        userId: session.userId,
        interactionType: 'SAFETY_PLAN_CREATED',
        entityType: 'safety_plan',
        entityId: `safety_plan_${Date.now()}`,
        metadata: {
          createdAt: new Date().toISOString(),
          language: session.language
        }
      }
    });

    return {
      message: this.getLocalizedText('safety_plan_created', session.language),
      buttons: [
        { id: 'review_plan', title: this.getLocalizedText('review_plan', session.language) },
        { id: 'share_plan', title: this.getLocalizedText('share_plan', session.language) },
        { id: 'main_menu', title: this.getLocalizedText('main_menu', session.language) }
      ],
      shouldEndFlow: true,
      priority: 'medium'
    };
  }

  private findProfessionalHelp(session: UserSession): FlowResponse {
    return {
      message: this.getLocalizedText('professional_help_info', session.language),
      buttons: [
        { id: 'find_therapist', title: this.getLocalizedText('find_therapist', session.language) },
        { id: 'emergency_services', title: this.getLocalizedText('emergency_services', session.language) },
        { id: 'main_menu', title: this.getLocalizedText('main_menu', session.language) }
      ],
      shouldEndFlow: true,
      priority: 'high'
    };
  }

  private async scheduleFollowUp(session: UserSession): Promise<FlowResponse> {
    // Schedule a follow-up check-in
    await prisma.userInteraction.create({
      data: {
        userId: session.userId,
        interactionType: 'FOLLOWUP_SCHEDULED',
        entityType: 'followup',
        entityId: `followup_${Date.now()}`,
        metadata: {
          scheduledFor: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 hours
          language: session.language,
          crisisLevel: 'high'
        }
      }
    });

    return {
      message: this.getLocalizedText('followup_scheduled', session.language),
      buttons: [
        { id: 'immediate_support', title: this.getLocalizedText('need_immediate_support', session.language) },
        { id: 'main_menu', title: this.getLocalizedText('main_menu', session.language) }
      ],
      shouldEndFlow: true,
      priority: 'medium'
    };
  }

  private continueSupport(session: UserSession): FlowResponse {
    return {
      message: this.getLocalizedText('continue_support', session.language),
      quickReplies: [
        this.getLocalizedText('feeling_better', session.language),
        this.getLocalizedText('still_struggling', session.language),
        this.getLocalizedText('need_more_help', session.language)
      ],
      buttons: [
        { id: 'crisis_resources', title: this.getLocalizedText('view_resources', session.language) },
        { id: 'main_menu', title: this.getLocalizedText('main_menu', session.language) }
      ],
      shouldEndFlow: true,
      priority: 'medium'
    };
  }

  private async createCrisisReferral(session: UserSession): Promise<void> {
    // First, find a crisis resource to reference
    const crisisResource = await prisma.mentalHealthResource.findFirst({
      where: {
        category: 'CRISIS_SUPPORT',
        isActive: true
      }
    });

    if (crisisResource) {
      await prisma.serviceReferral.create({
        data: {
          userId: session.userId,
          resourceId: crisisResource.id,
          referralType: 'emergency',
          urgencyLevel: 'critical',
          status: 'pending',
          notes: 'Crisis intervention required - immediate safety concern',
          language: session.language
        }
      });
    }
  }

  private async logCrisisResourceAccess(session: UserSession, resourceIds: string[]): Promise<void> {
    const interactions = resourceIds.map(resourceId => ({
      userId: session.userId,
      interactionType: 'RESOURCE_ACCESSED' as const,
      entityType: 'mental_health_resource' as const,
      entityId: resourceId,
      metadata: {
        accessedAt: new Date().toISOString(),
        context: 'crisis_intervention',
        language: session.language
      }
    }));

    await prisma.userInteraction.createMany({
      data: interactions
    });
  }

  private getLocalizedField(jsonField: any, language: string): string {
    if (typeof jsonField === 'string') return jsonField;
    if (typeof jsonField === 'object' && jsonField !== null) {
      return jsonField[language] || jsonField.en || 'No content available';
    }
    return 'No content available';
  }

  private getLocalizedText(key: string, language: string): string {
    const texts: Record<string, Record<string, string>> = {
      crisis_immediate_response: {
        en: "üö® I'm very concerned about you right now. Your safety is the most important thing.\n\nüõ°Ô∏è You are not alone. Help is available 24/7.\n\nPlease let me know your current situation:",
        zh: "üö® ÊàëÁé∞Âú®ÈùûÂ∏∏ÊãÖÂøÉÊÇ®„ÄÇÊÇ®ÁöÑÂÆâÂÖ®ÊòØÊúÄÈáçË¶ÅÁöÑ„ÄÇ\n\nüõ°Ô∏è ÊÇ®Âπ∂‰∏çÂ≠§Âçï„ÄÇ24/7ÈÉΩÊúâÂ∏ÆÂä©ÂèØÁî®„ÄÇ\n\nËØ∑ÂëäËØâÊàëÊÇ®ÁõÆÂâçÁöÑÊÉÖÂÜµÔºö",
        bn: "üö® ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶ø‡¶§‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ‡¶á ‡¶∏‡¶¨‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡•§\n\nüõ°Ô∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶æ ‡¶®‡¶®‡•§ ‡ß®‡ß™/‡ß≠ ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß‡•§\n\n‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ú‡¶æ‡¶®‡¶æ‡¶®:",
        ta: "üö® ‡Æ®‡Ææ‡Æ©‡Øç ‡Æá‡Æ™‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡ÆÆ‡Æø‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æµ‡Æ≤‡Øà‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡ØÅ ‡ÆÆ‡Æø‡Æï ‡ÆÆ‡ØÅ‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç.\n\nüõ°Ô∏è ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ§‡Æ©‡Æø‡ÆØ‡Ææ‡Æï ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà. ‡Æâ‡Æ§‡Æµ‡Æø 24/7 ‡Æï‡Æø‡Æü‡Øà‡Æï‡Øç‡Æï‡Æø‡Æ±‡Æ§‡ØÅ.\n\n‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ§‡Æ±‡Øç‡Æ™‡Øã‡Æ§‡Øà‡ÆØ ‡Æ®‡Æø‡Æ≤‡Øà‡ÆÆ‡Øà‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡ØÜ‡Æ∞‡Æø‡ÆØ‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç:",
        my: "üö® ·ÄÄ·Äª·ÄΩ·Äî·Ä∫·Äê·Ä±·Ä¨·Ä∫ ·Ä°·ÄÅ·ÄØ·ÄÅ·Äª·Ä≠·Äî·Ä∫·Äô·Äæ·Ä¨ ·Äû·ÄÑ·Ä∑·Ä∫·Ä°·Äê·ÄΩ·ÄÄ·Ä∫ ·Ä°·Äõ·Äô·Ä∫·Ä∏·ÄÖ·Ä≠·ÄØ·Ä∏·Äõ·Ä≠·Äô·Ä∫·Äî·Ä±·Äï·Ä´·Äê·Äö·Ä∫·Åã ·Äû·ÄÑ·Ä∑·Ä∫·Äú·ÄØ·Ä∂·ÄÅ·Äº·ÄØ·Ä∂·Äô·Äæ·ÄØ·ÄÄ ·Ä°·Äõ·Ä±·Ä∏·ÄÄ·Äº·ÄÆ·Ä∏·ÄÜ·ÄØ·Ä∂·Ä∏·Äï·Ä´·Åã\n\nüõ°Ô∏è ·Äû·ÄÑ·Ä∫·Äê·ÄÖ·Ä∫·Äö·Ä±·Ä¨·ÄÄ·Ä∫·Äê·Ää·Ä∫·Ä∏·Äô·Äü·ÄØ·Äê·Ä∫·Äï·Ä´·Åã ·ÅÇ·ÅÑ/·Åá ·Ä°·ÄÄ·Ä∞·Ä°·Ää·ÄÆ·Äõ·Äî·Ä≠·ÄØ·ÄÑ·Ä∫·Äï·Ä´·Äê·Äö·Ä∫·Åã\n\n·Äû·ÄÑ·Ä∑·Ä∫·Äõ·Ä≤·Ä∑ ·Äú·Ä±·Ä¨·Äú·Ä±·Ä¨·ÄÜ·Äö·Ä∫ ·Ä°·ÄÅ·Äº·Ä±·Ä°·Äî·Ä±·ÄÄ·Ä≠·ÄØ ·Äï·Äº·Ä±·Ä¨·Äï·Äº·Äï·Ä´:",
        id: "üö® Saya sangat khawatir tentang Anda sekarang. Keselamatan Anda adalah hal yang paling penting.\n\nüõ°Ô∏è Anda tidak sendirian. Bantuan tersedia 24/7.\n\nTolong beri tahu saya situasi Anda saat ini:"
      },
      crisis_safe_now: {
        en: "I'm safe right now",
        zh: "ÊàëÁé∞Âú®ÂæàÂÆâÂÖ®",
        bn: "‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶® ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶",
        ta: "‡Æ®‡Ææ‡Æ©‡Øç ‡Æá‡Æ™‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡Ææ‡Æï ‡Æá‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç",
        my: "·ÄÄ·Äª·ÄΩ·Äî·Ä∫·Äê·Ä±·Ä¨·Ä∫ ·Ä°·ÄÅ·ÄØ·ÄÅ·Äª·Ä≠·Äî·Ä∫·Äô·Äæ·Ä¨ ·Äú·ÄØ·Ä∂·ÄÅ·Äº·ÄØ·Ä∂·Äï·Ä´·Äê·Äö·Ä∫",
        id: "Saya aman sekarang"
      },
      crisis_need_help: {
        en: "I need immediate help",
        zh: "ÊàëÈúÄË¶ÅÁ´ãÂç≥Â∏ÆÂä©",
        bn: "‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶§‡¶æ‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶ø‡¶ï ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞",
        ta: "‡Æé‡Æ©‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æü‡Æ©‡Æü‡Æø ‡Æâ‡Æ§‡Æµ‡Æø ‡Æµ‡Øá‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç",
        my: "·ÄÄ·Äª·ÄΩ·Äî·Ä∫·Äê·Ä±·Ä¨·Ä∫ ·ÄÅ·Äª·ÄÄ·Ä∫·ÄÅ·Äª·ÄÑ·Ä∫·Ä∏ ·Ä°·ÄÄ·Ä∞·Ä°·Ää·ÄÆ ·Äú·Ä≠·ÄØ·Äï·Ä´·Äê·Äö·Ä∫",
        id: "Saya butuh bantuan segera"
      },
      crisis_someone_else: {
        en: "I'm worried about someone else",
        zh: "ÊàëÊãÖÂøÉÂÖ∂‰ªñ‰∫∫",
        bn: "‡¶Ü‡¶Æ‡¶ø ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶∞‡ßã ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶ø‡¶§",
        ta: "‡Æ®‡Ææ‡Æ©‡Øç ‡Æµ‡Øá‡Æ±‡ØÅ ‡ÆØ‡Ææ‡Æ∞‡Øà‡ÆØ‡Ææ‡Æµ‡Æ§‡ØÅ ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æï‡Æµ‡Æ≤‡Øà‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç",
        my: "·ÄÄ·Äª·ÄΩ·Äî·Ä∫·Äê·Ä±·Ä¨·Ä∫ ·Äê·ÄÅ·Äº·Ä¨·Ä∏·Äû·Ä∞·Äê·ÄÖ·Ä∫·Äö·Ä±·Ä¨·ÄÄ·Ä∫·Ä°·Äê·ÄΩ·ÄÄ·Ä∫ ·ÄÖ·Ä≠·ÄØ·Ä∏·Äõ·Ä≠·Äô·Ä∫·Äî·Ä±·Äï·Ä´·Äê·Äö·Ä∫",
        id: "Saya khawatir tentang orang lain"
      },
      crisis_glad_safe: {
        en: "I'm glad to hear you're safe. How can I best support you right now?",
        zh: "ÂæàÈ´òÂÖ¥Âê¨Âà∞ÊÇ®ÂÆâÂÖ®„ÄÇÊàëÁé∞Âú®Â¶Ç‰ΩïÊúÄÂ•ΩÂú∞ÊîØÊåÅÊÇ®Ôºü",
        bn: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶∂‡ßÅ‡¶®‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶ñ‡ßÅ‡¶∂‡¶ø‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶≠‡¶æ‡¶≤ ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?",
        ta: "‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡Ææ‡Æï ‡Æá‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æ§‡Øà‡Æï‡Øç ‡Æï‡Øá‡Æü‡Øç‡Æü‡ØÅ ‡ÆÆ‡Æï‡¶ø‡Æ¥‡Øç‡Æö‡Øç‡Æö‡Æø. ‡Æá‡Æ™‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡Æé‡Æ™‡Øç‡Æ™‡Æü‡Æø ‡Æö‡Æø‡Æ±‡Æ™‡Øç‡Æ™‡Ææ‡Æï ‡ÆÜ‡Æ§‡Æ∞‡Æø‡Æï‡Øç‡Æï ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç?",
        my: "·Äû·ÄÑ·Ä∫ ·Äú·ÄØ·Ä∂·ÄÅ·Äº·ÄØ·Ä∂·Äï·Ä´·Äê·Äö·Ä∫·Äú·Ä≠·ÄØ·Ä∑ ·ÄÄ·Äº·Ä¨·Ä∏·Äõ·Äê·Ä¨ ·Äù·Äô·Ä∫·Ä∏·Äû·Ä¨·Äï·Ä´·Äê·Äö·Ä∫·Åã ·Ä°·ÄÅ·ÄØ·ÄÅ·Äª·Ä≠·Äî·Ä∫·Äô·Äæ·Ä¨ ·Äû·ÄÑ·Ä∑·Ä∫·ÄÄ·Ä≠·ÄØ ·Äò·Äö·Ä∫·Äú·Ä≠·ÄØ ·Ä°·ÄÄ·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·ÄÜ·ÄØ·Ä∂·Ä∏ ·Äë·Ä±·Ä¨·ÄÄ·Ä∫·Äï·Ä∂·Ä∑·Äî·Ä≠·ÄØ·ÄÑ·Ä∫·Äô·Äú·Ä≤?",
        id: "Saya senang mendengar Anda aman. Bagaimana saya bisa mendukung Anda sebaik-baiknya sekarang?"
      },
      crisis_talk_more: {
        en: "I want to talk more about my feelings",
        zh: "ÊàëÊÉ≥Êõ¥Â§öÂú∞Ë∞àËÆ∫ÊàëÁöÑÊÑüÂèó",
        bn: "‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶≠‡ßÇ‡¶§‡¶ø ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶∞‡ßã ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶á",
        ta: "‡Æé‡Æ©‡Øç ‡Æâ‡Æ£‡Æ∞‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡ÆÆ‡Øá‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Øá‡Æö ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç",
        my: "·ÄÄ·Äª·ÄΩ·Äî·Ä∫·Äê·Ä±·Ä¨·Ä∑·Ä∫·Äõ·Ä≤·Ä∑ ·ÄÅ·Ä∂·ÄÖ·Ä¨·Ä∏·ÄÅ·Äª·ÄÄ·Ä∫·Äô·Äª·Ä¨·Ä∏·Ä°·ÄÄ·Äº·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏ ·Äï·Ä≠·ÄØ·Äï·Äº·ÄÆ·Ä∏ ·Äï·Äº·Ä±·Ä¨·ÄÅ·Äª·ÄÑ·Ä∫·Äï·Ä´·Äê·Äö·Ä∫",
        id: "Saya ingin berbicara lebih banyak tentang perasaan saya"
      },
      crisis_get_resources: {
        en: "Show me helpful resources",
        zh: "ÁªôÊàëÊòæÁ§∫ÊúâÁî®ÁöÑËµÑÊ∫ê",
        bn: "‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶∏‡¶Ç‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®",
        ta: "‡Æ™‡ÆØ‡Æ©‡ØÅ‡Æ≥‡Øç‡Æ≥ ‡Æµ‡Æ≥‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Ææ‡Æü‡Øç‡Æü‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç",
        my: "·Ä°·ÄÄ·Ä∞·Ä°·Ää·ÄÆ·Äñ·Äº·ÄÖ·Ä∫·Äê·Ä≤·Ä∑ ·Ä°·Äõ·ÄÑ·Ä∫·Ä∏·Ä°·Äô·Äº·ÄÖ·Ä∫·Äô·Äª·Ä¨·Ä∏·ÄÄ·Ä≠·ÄØ ·Äï·Äº·Äï·Ä´",
        id: "Tunjukkan sumber daya yang berguna"
      },
      crisis_immediate_help: {
        en: "üÜò You've requested immediate help. Here are your fastest options for support:",
        zh: "üÜò ÊÇ®Â∑≤ËØ∑Ê±ÇÁ´ãÂç≥Â∏ÆÂä©„ÄÇ‰ª•‰∏ãÊòØÊÇ®ÊúÄÂø´ÁöÑÊîØÊåÅÈÄâÈ°πÔºö",
        bn: "üÜò ‡¶Ü‡¶™‡¶®‡¶ø ‡¶§‡¶æ‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶ø‡¶ï ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§‡¶§‡¶Æ ‡¶¨‡¶ø‡¶ï‡¶≤‡ßç‡¶™ ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá:",
        ta: "üÜò ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æâ‡Æü‡Æ©‡Æü‡Æø ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Øà‡Æï‡Øç ‡Æï‡Øã‡Æ∞‡Æø‡ÆØ‡ØÅ‡Æ≥‡Øç‡Æ≥‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç. ‡ÆÜ‡Æ§‡Æ∞‡Æµ‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æ© ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ©‡Øç ‡Æµ‡Æø‡Æ∞‡Øà‡Æµ‡Ææ‡Æ© ‡Æµ‡Æø‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æá‡Æô‡Øç‡Æï‡Øá:",
        my: "üÜò ·Äû·ÄÑ·Ä∫ ·ÄÅ·Äª·ÄÄ·Ä∫·ÄÅ·Äª·ÄÑ·Ä∫·Ä∏ ·Ä°·ÄÄ·Ä∞·Ä°·Ää·ÄÆ·Äê·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·ÄÅ·Ä∂·Äë·Ä¨·Ä∏·Äï·Ä´·Äê·Äö·Ä∫·Åã ·Äë·Ä±·Ä¨·ÄÄ·Ä∫·Äï·Ä∂·Ä∑·Äô·Äæ·ÄØ·Ä°·Äê·ÄΩ·ÄÄ·Ä∫ ·Äû·ÄÑ·Ä∑·Ä∫·Äõ·Ä≤·Ä∑ ·Ä°·Äô·Äº·Äî·Ä∫·ÄÜ·ÄØ·Ä∂·Ä∏ ·Äõ·ÄΩ·Ä±·Ä∏·ÄÅ·Äª·Äö·Ä∫·ÄÖ·Äõ·Ä¨·Äô·Äª·Ä¨·Ä∏ ·Äí·ÄÆ·Äô·Äæ·Ä¨ ·Äõ·Äæ·Ä≠·Äï·Ä´·Äê·Äö·Ä∫:",
        id: "üÜò Anda telah meminta bantuan segera. Berikut adalah opsi tercepat untuk dukungan:"
      },
      call_emergency: {
        en: "üìû Call Emergency Services",
        zh: "üìû Êã®ÊâìÁ¥ßÊÄ•ÊúçÂä°",
        bn: "üìû ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶∏‡ßá‡¶¨‡¶æ‡¶Ø‡¶º ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®",
        ta: "üìû ‡ÆÖ‡Æµ‡Æö‡Æ∞ ‡Æö‡Øá‡Æµ‡Øà‡Æï‡Æ≥‡Øà ‡ÆÖ‡Æ¥‡Øà‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        my: "üìû ·Ä°·Äõ·Ä±·Ä∏·Äï·Ä±·Ä´·Ä∫ ·Äù·Äî·Ä∫·ÄÜ·Ä±·Ä¨·ÄÑ·Ä∫·Äô·Äæ·ÄØ·Äô·Äª·Ä¨·Ä∏·ÄÄ·Ä≠·ÄØ ·ÄÅ·Ä±·Ä´·Ä∫·Äï·Ä´",
        id: "üìû Hubungi Layanan Darurat"
      },
      crisis_chat: {
        en: "üí¨ Crisis Chat Support",
        zh: "üí¨ Âç±Êú∫ËÅäÂ§©ÊîØÊåÅ",
        bn: "üí¨ ‡¶∏‡¶Ç‡¶ï‡¶ü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ",
        ta: "üí¨ ‡Æ®‡ØÜ‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æü‡Æø ‡ÆÖ‡Æ∞‡Æü‡Øç‡Æü‡Øà ‡ÆÜ‡Æ§‡Æ∞‡Æµ‡ØÅ",
        my: "üí¨ ·Ä°·ÄÄ·Äª·Äï·Ä∫·Ä°·Äê·Ää·Ä∫·Ä∏ ·ÄÅ·Äª·Äê·Ä∫ ·Äë·Ä±·Ä¨·ÄÄ·Ä∫·Äï·Ä∂·Ä∑·Äô·Äæ·ÄØ",
        id: "üí¨ Dukungan Chat Krisis"
      },
      safety_plan: {
        en: "üõ°Ô∏è Create Safety Plan",
        zh: "üõ°Ô∏è ÂàõÂª∫ÂÆâÂÖ®ËÆ°Âàí",
        bn: "üõ°Ô∏è ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ ‡¶™‡¶∞‡¶ø‡¶ï‡¶≤‡ßç‡¶™‡¶®‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®",
        ta: "üõ°Ô∏è ‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ§‡Æø‡Æü‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Øà ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        my: "üõ°Ô∏è ·Äú·ÄØ·Ä∂·ÄÅ·Äº·ÄØ·Ä∂·Äõ·Ä±·Ä∏ ·Ä°·ÄÖ·ÄÆ·Ä°·ÄÖ·Äâ·Ä∫ ·Äï·Äº·ÄØ·Äú·ÄØ·Äï·Ä∫·Äï·Ä´",
        id: "üõ°Ô∏è Buat Rencana Keamanan"
      },
      crisis_resources_intro: {
        en: "üÜò **Crisis Support Resources**\n\nHere are immediate support options available to you:",
        zh: "üÜò **Âç±Êú∫ÊîØÊåÅËµÑÊ∫ê**\n\n‰ª•‰∏ãÊòØÊÇ®ÂèØÁî®ÁöÑÁ´ãÂç≥ÊîØÊåÅÈÄâÈ°πÔºö",
        bn: "üÜò **‡¶∏‡¶Ç‡¶ï‡¶ü ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶∏‡¶Ç‡¶∏‡ßç‡¶•‡¶æ‡¶®**\n\n‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶§‡¶æ‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶ø‡¶ï ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶ï‡¶≤‡ßç‡¶™ ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá:",
        ta: "üÜò **‡Æ®‡ØÜ‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æü‡Æø ‡ÆÜ‡Æ§‡Æ∞‡Æµ‡ØÅ ‡Æµ‡Æ≥‡Æô‡Øç‡Æï‡Æ≥‡Øç**\n\n‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡Æï‡Øç ‡Æï‡Æø‡Æü‡Øà‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æü‡Æ©‡Æü‡Æø ‡ÆÜ‡Æ§‡Æ∞‡Æµ‡ØÅ ‡Æµ‡Æø‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æá‡Æô‡Øç‡Æï‡Øá:",
        my: "üÜò **·Ä°·ÄÄ·Äª·Äï·Ä∫·Ä°·Äê·Ää·Ä∫·Ä∏ ·Äë·Ä±·Ä¨·ÄÄ·Ä∫·Äï·Ä∂·Ä∑·Äô·Äæ·ÄØ ·Ä°·Äõ·ÄÑ·Ä∫·Ä∏·Ä°·Äô·Äº·ÄÖ·Ä∫·Äô·Äª·Ä¨·Ä∏**\n\n·Äû·ÄÑ·Ä∑·Ä∫·Ä°·Äê·ÄΩ·ÄÄ·Ä∫ ·Äõ·Äõ·Äæ·Ä≠·Äî·Ä≠·ÄØ·ÄÑ·Ä∫·Äê·Ä≤·Ä∑ ·ÄÅ·Äª·ÄÄ·Ä∫·ÄÅ·Äª·ÄÑ·Ä∫·Ä∏ ·Äë·Ä±·Ä¨·ÄÄ·Ä∫·Äï·Ä∂·Ä∑·Äô·Äæ·ÄØ ·Äõ·ÄΩ·Ä±·Ä∏·ÄÅ·Äª·Äö·Ä∫·ÄÖ·Äõ·Ä¨·Äô·Äª·Ä¨·Ä∏ ·Äí·ÄÆ·Äô·Äæ·Ä¨ ·Äõ·Äæ·Ä≠·Äï·Ä´·Äê·Äö·Ä∫:",
        id: "üÜò **Sumber Daya Dukungan Krisis**\n\nBerikut adalah opsi dukungan langsung yang tersedia untuk Anda:"
      },
      call_hotline: {
        en: "üìû Call Crisis Hotline",
        zh: "üìû Êã®ÊâìÂç±Êú∫ÁÉ≠Á∫ø",
        bn: "üìû ‡¶∏‡¶Ç‡¶ï‡¶ü ‡¶π‡¶ü‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®",
        ta: "üìû ‡Æ®‡ØÜ‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æü‡Æø ‡Æπ‡Ææ‡Æü‡Øç‡Æ≤‡Øà‡Æ©‡Øà ‡ÆÖ‡Æ¥‡Øà‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        my: "üìû ·Ä°·ÄÄ·Äª·Äï·Ä∫·Ä°·Äê·Ää·Ä∫·Ä∏ ·Äü·Ä±·Ä¨·Ä∑·Äú·Ä≠·ÄØ·ÄÑ·Ä∫·Ä∏·ÄÄ·Ä≠·ÄØ ·ÄÅ·Ä±·Ä´·Ä∫·Äï·Ä´",
        id: "üìû Hubungi Hotline Krisis"
      },
      create_safety_plan: {
        en: "üõ°Ô∏è Safety Planning",
        zh: "üõ°Ô∏è ÂÆâÂÖ®ËßÑÂàí",
        bn: "üõ°Ô∏è ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ ‡¶™‡¶∞‡¶ø‡¶ï‡¶≤‡ßç‡¶™‡¶®‡¶æ",
        ta: "üõ°Ô∏è ‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ§‡Æø‡Æü‡Øç‡Æü‡ÆÆ‡Æø‡Æü‡Æ≤‡Øç",
        my: "üõ°Ô∏è ·Äú·ÄØ·Ä∂·ÄÅ·Äº·ÄØ·Ä∂·Äõ·Ä±·Ä∏ ·Ä°·ÄÖ·ÄÆ·Ä°·ÄÖ·Äâ·Ä∫·ÄÅ·Äª·Äô·Äæ·Äê·Ä∫·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏",
        id: "üõ°Ô∏è Perencanaan Keamanan"
      },
      find_professional: {
        en: "üè• Find Professional Help",
        zh: "üè• ÂØªÊâæ‰∏ì‰∏öÂ∏ÆÂä©",
        bn: "üè• ‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®",
        ta: "üè• ‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç‡ÆÆ‡ØÅ‡Æ±‡Øà ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡Æ±‡Æø‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç",
        my: "üè• ·Äï·Äõ·Ä±·Ä¨·Ä∫·Äñ·ÄÄ·Ä∫·Äõ·Äæ·ÄÑ·Ä∫·Äî·Äö·Ä∫ ·Ä°·ÄÄ·Ä∞·Ä°·Ää·ÄÆ ·Äõ·Äæ·Ä¨·Äï·Ä´",
        id: "üè• Cari Bantuan Profesional"
      },
      schedule_followup: {
        en: "üìÖ Schedule Follow-up",
        zh: "üìÖ ÂÆâÊéíË∑üËøõ",
        bn: "üìÖ ‡¶´‡¶≤‡ßã-‡¶Ü‡¶™ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡ßÄ ‡¶ï‡¶∞‡ßÅ‡¶®",
        ta: "üìÖ ‡Æ™‡Æø‡Æ©‡Øç‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ§‡Æ≤‡Øà ‡Æ§‡Æø‡Æü‡Øç‡Æü‡ÆÆ‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç",
        my: "üìÖ ·Äî·Ä±·Ä¨·ÄÄ·Ä∫·ÄÜ·ÄÄ·Ä∫·Äê·ÄΩ·Ä≤ ·ÄÖ·ÄÖ·Ä∫·ÄÜ·Ä±·Ä∏·Äô·Äæ·ÄØ ·ÄÖ·ÄÆ·ÄÖ·Äâ·Ä∫·Äï·Ä´",
        id: "üìÖ Jadwalkan Tindak Lanjut"
      },
      main_menu: {
        en: "üè† Main Menu",
        zh: "üè† ‰∏ªËèúÂçï",
        bn: "üè† ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ",
        ta: "üè† ‡ÆÆ‡ØÅ‡Æ§‡Æ©‡Øç‡ÆÆ‡Øà ‡ÆÆ‡ØÜ‡Æ©‡ØÅ",
        my: "üè† ·Äï·ÄÑ·Ä∫·Äô ·Äô·ÄÆ·Äî·Ä∞·Ä∏",
        id: "üè† Menu Utama"
      }
    };

    const textSet = texts[key];
    if (!textSet) return key;
    
    return textSet[language] || textSet.en || key;
  }
}
