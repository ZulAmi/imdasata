import { prisma } from '@/lib/prisma';

interface UserState {
  userId: string;
  language: string;
  currentFlow: string;
  step: number;
  context: Record<string, any>;
  lastActivity: Date;
}

interface ConversationResponse {
  message: string;
  quickReplies?: string[];
  buttons?: Array<{id: string, title: string}>;
  newState: UserState;
}

export class ConversationFlow {
  async processMessage(message: string, userState: UserState): Promise<ConversationResponse> {
    const lowerMessage = message.toLowerCase().trim();

    // Handle global commands
    if (lowerMessage === 'help' || lowerMessage === 'menu') {
      return this.showMainMenu(userState);
    }

    if (lowerMessage === 'stop' || lowerMessage === 'quit') {
      return this.handleStopCommand(userState);
    }

    // Route to appropriate flow
    switch (userState.currentFlow) {
      case 'welcome':
        return this.handleWelcomeFlow(message, userState);
      case 'phq4_assessment':
        return this.handlePHQ4Flow(message, userState);
      case 'mood_checkin':
        return this.handleMoodCheckin(message, userState);
      case 'peer_support':
        return this.handlePeerSupport(message, userState);
      case 'resources':
        return this.handleResourcesFlow(message, userState);
      default:
        return this.showMainMenu(userState);
    }
  }

  private showMainMenu(userState: UserState): ConversationResponse {
    const menuText = this.getLocalizedText('main_menu', userState.language);
    
    return {
      message: menuText,
      quickReplies: [
        this.getLocalizedText('menu_assessment', userState.language),
        this.getLocalizedText('menu_mood_log', userState.language),
        this.getLocalizedText('menu_resources', userState.language),
        this.getLocalizedText('menu_peer_support', userState.language)
      ],
      newState: {
        ...userState,
        currentFlow: 'main_menu',
        step: 0,
        context: {}
      }
    };
  }

  private async handleWelcomeFlow(message: string, userState: UserState): Promise<ConversationResponse> {
    if (userState.step === 0) {
      // First interaction - welcome message
      const welcomeText = this.getLocalizedText('welcome_message', userState.language);
      
      return {
        message: welcomeText,
        quickReplies: [
          this.getLocalizedText('get_started', userState.language),
          this.getLocalizedText('learn_more', userState.language)
        ],
        newState: {
          ...userState,
          step: 1
        }
      };
    } else {
      // User responded to welcome
      if (message.toLowerCase().includes('start') || message.includes('ÂºÄÂßã') || message.includes('‡¶∂‡ßÅ‡¶∞‡ßÅ')) {
        return this.showMainMenu(userState);
      } else {
        return this.showAppInfo(userState);
      }
    }
  }

  private async handlePHQ4Flow(message: string, userState: UserState): Promise<ConversationResponse> {
    const questions = [
      'phq4_q1_nervous',
      'phq4_q2_worry',
      'phq4_q3_little_interest',
      'phq4_q4_feeling_down'
    ];

    if (userState.step === 0) {
      // Start assessment
      const introText = this.getLocalizedText('phq4_intro', userState.language);
      const firstQuestion = this.getLocalizedText(questions[0], userState.language);
      
      return {
        message: `${introText}\n\n1/4: ${firstQuestion}`,
        quickReplies: ['0 - Not at all', '1 - Several days', '2 - More than half', '3 - Nearly every day'],
        newState: {
          ...userState,
          step: 1,
          context: { answers: [] }
        }
      };
    } else if (userState.step <= 4) {
      // Process answer and ask next question
      const score = this.parseScore(message);
      if (score === -1) {
        return {
          message: this.getLocalizedText('invalid_score', userState.language),
          quickReplies: ['0 - Not at all', '1 - Several days', '2 - More than half', '3 - Nearly every day'],
          newState: userState
        };
      }

      userState.context.answers.push(score);

      if (userState.step === 4) {
        // Assessment complete
        return await this.completePHQ4Assessment(userState);
      } else {
        // Ask next question
        const nextQuestion = this.getLocalizedText(questions[userState.step], userState.language);
        return {
          message: `${userState.step + 1}/4: ${nextQuestion}`,
          quickReplies: ['0 - Not at all', '1 - Several days', '2 - More than half', '3 - Nearly every day'],
          newState: {
            ...userState,
            step: userState.step + 1
          }
        };
      }
    }

    return this.showMainMenu(userState);
  }

  private async completePHQ4Assessment(userState: UserState): Promise<ConversationResponse> {
    const answers = userState.context.answers as number[];
    const anxietyScore = answers[0] + answers[1]; // First 2 questions (Q3, Q4 in schema)
    const depressionScore = answers[2] + answers[3]; // Last 2 questions (Q1, Q2 in schema)
    const totalScore = anxietyScore + depressionScore;

    // Determine severity based on PHQ-4 scoring
    const getSeverityLevel = (totalScore: number): string => {
      if (totalScore >= 9) return 'severe';
      if (totalScore >= 6) return 'moderate';
      if (totalScore >= 3) return 'mild';
      return 'minimal';
    };

    // Save to database using correct schema field names
    await prisma.pHQ4Assessment.create({
      data: {
        userId: userState.userId,
        question1Score: answers[2], // "Little interest or pleasure in doing things"
        question2Score: answers[3], // "Feeling down, depressed, or hopeless"
        question3Score: answers[0], // "Feeling nervous, anxious, or on edge"
        question4Score: answers[1], // "Not being able to stop or control worrying"
        anxietyScore,
        depressionScore,
        totalScore,
        severityLevel: getSeverityLevel(totalScore),
        language: userState.language
      }
    });

    // Award points for completing assessment
    await this.awardPoints(userState.userId, 'ASSESSMENT_COMPLETED', 10);

    // Generate response based on severity
    let responseKey = 'phq4_result_minimal';
    if (totalScore >= 6) {
      responseKey = 'phq4_result_moderate';
      
      // Create service referral for moderate/severe cases - find a counseling resource first
      const counselingResource = await prisma.mentalHealthResource.findFirst({
        where: {
          category: 'counseling',
          isActive: true
        }
      });

      if (counselingResource) {
        await prisma.serviceReferral.create({
          data: {
            userId: userState.userId,
            resourceId: counselingResource.id,
            referralType: 'counseling',
            urgencyLevel: totalScore >= 9 ? 'high' : 'medium',
            language: userState.language
          }
        });
      }
    } else if (totalScore >= 3) {
      responseKey = 'phq4_result_mild';
    }

    const resultMessage = this.getLocalizedText(responseKey, userState.language);
    
    return {
      message: resultMessage,
      buttons: [
        { id: 'view_resources', title: this.getLocalizedText('view_resources', userState.language) },
        { id: 'main_menu', title: this.getLocalizedText('main_menu_button', userState.language) }
      ],
      newState: {
        ...userState,
        currentFlow: 'main_menu',
        step: 0,
        context: {}
      }
    };
  }

  private async handleMoodCheckin(message: string, userState: UserState): Promise<ConversationResponse> {
    if (userState.step === 0) {
      // Ask for mood rating
      return {
        message: this.getLocalizedText('mood_checkin_prompt', userState.language),
        quickReplies: ['üòî 1-2', 'üòê 3-4', 'üôÇ 5-6', 'üòä 7-8', 'üòÑ 9-10'],
        newState: {
          ...userState,
          step: 1
        }
      };
    } else if (userState.step === 1) {
      // Process mood rating
      const moodScore = this.parseMoodLevel(message);
      if (moodScore === -1) {
        return {
          message: this.getLocalizedText('invalid_mood', userState.language),
          quickReplies: ['üòî 1-2', 'üòê 3-4', 'üôÇ 5-6', 'üòä 7-8', 'üòÑ 9-10'],
          newState: userState
        };
      }

      userState.context.moodScore = moodScore;

      return {
        message: this.getLocalizedText('mood_notes_prompt', userState.language),
        newState: {
          ...userState,
          step: 2
        }
      };
    } else if (userState.step === 2) {
      // Save mood log using correct schema field names
      const notes = message === 'skip' ? null : message;
      
      await prisma.moodLog.create({
        data: {
          userId: userState.userId,
          moodScore: userState.context.moodScore, // Changed from moodLevel to moodScore
          notes,
          emotions: [], // Default empty array for emotions
          triggers: [], // Default empty array for triggers
          language: userState.language
        }
      });

      // Award points
      await this.awardPoints(userState.userId, 'MOOD_LOG_COMPLETED', 5);

      const thankYouMessage = this.getLocalizedText('mood_logged_thanks', userState.language);
      
      return {
        message: thankYouMessage,
        buttons: [
          { id: 'view_trends', title: this.getLocalizedText('view_mood_trends', userState.language) },
          { id: 'main_menu', title: this.getLocalizedText('main_menu_button', userState.language) }
        ],
        newState: {
          ...userState,
          currentFlow: 'main_menu',
          step: 0,
          context: {}
        }
      };
    }

    return this.showMainMenu(userState);
  }

  private async handleResourcesFlow(message: string, userState: UserState): Promise<ConversationResponse> {
    const categories = ['crisis', 'counseling', 'support_group', 'self_help'];
    
    if (userState.step === 0) {
      return {
        message: this.getLocalizedText('resources_menu', userState.language),
        quickReplies: categories.map(cat => this.getLocalizedText(`category_${cat}`, userState.language)),
        newState: {
          ...userState,
          step: 1
        }
      };
    } else {
      // Find matching category
      const selectedCategory = this.matchCategory(message, userState.language);
      if (selectedCategory) {
        const resources = await prisma.mentalHealthResource.findMany({
          where: {
            category: selectedCategory,
            isActive: true
          },
          take: 3
        });

        let resourceText = this.getLocalizedText('resources_found', userState.language) + '\n\n';
        resources.forEach((resource, index) => {
          const content = this.getResourceContent(resource, userState.language);
          resourceText += `${index + 1}. ${content}\n\n`;
        });

        return {
          message: resourceText,
          buttons: [
            { id: 'more_resources', title: this.getLocalizedText('more_resources', userState.language) },
            { id: 'main_menu', title: this.getLocalizedText('main_menu_button', userState.language) }
          ],
          newState: {
            ...userState,
            currentFlow: 'main_menu',
            step: 0,
            context: {}
          }
        };
      }
    }

    return this.showMainMenu(userState);
  }

  private async handlePeerSupport(message: string, userState: UserState): Promise<ConversationResponse> {
    // Implementation for peer support flow
    return {
      message: this.getLocalizedText('peer_support_coming_soon', userState.language),
      buttons: [
        { id: 'main_menu', title: this.getLocalizedText('main_menu_button', userState.language) }
      ],
      newState: {
        ...userState,
        currentFlow: 'main_menu',
        step: 0,
        context: {}
      }
    };
  }

  async handleSentimentResponse(sentiment: any, userState: UserState): Promise<ConversationResponse> {
    let responseKey = 'sentiment_neutral';
    
    if (sentiment.score < -0.5) {
      responseKey = 'sentiment_negative';
      // Offer additional support for negative sentiment
    } else if (sentiment.score > 0.5) {
      responseKey = 'sentiment_positive';
    }

    return {
      message: this.getLocalizedText(responseKey, userState.language),
      buttons: [
        { id: 'mood_checkin', title: this.getLocalizedText('log_mood', userState.language) },
        { id: 'view_resources', title: this.getLocalizedText('view_resources', userState.language) }
      ],
      newState: userState
    };
  }

  private parseScore(message: string): number {
    const match = message.match(/^[0-3]/) || message.match(/[0-3]/);
    return match ? parseInt(match[0]) : -1;
  }

  private parseMoodLevel(message: string): number {
    if (message.includes('1-2') || message.includes('üòî')) return 2;
    if (message.includes('3-4') || message.includes('üòê')) return 4;
    if (message.includes('5-6') || message.includes('üôÇ')) return 6;
    if (message.includes('7-8') || message.includes('üòä')) return 8;
    if (message.includes('9-10') || message.includes('üòÑ')) return 10;
    
    const num = parseInt(message);
    return (num >= 1 && num <= 10) ? num : -1;
  }

  private async awardPoints(userId: string, action: string, points: number): Promise<void> {
    await prisma.gamificationData.upsert({
      where: { userId },
      update: {
        totalPoints: { increment: points },
        updatedAt: new Date() // Changed from lastActivity to updatedAt
      },
      create: {
        userId,
        totalPoints: points,
        level: 1,
        streak: 1
      }
    });
  }

  private getLocalizedText(key: string, language: string): string {
    // Enhanced localization with SATA project requirements
    const texts: Record<string, Record<string, string>> = {
      main_menu: {
        en: "üåü Mental Wellness Assistant\n\nHow can I help you today?",
        zh: "üåü ÂøÉÁêÜÂÅ•Â∫∑Âä©Êâã\n\nÊàë‰ªäÂ§©ÂèØ‰ª•‰∏∫ÊÇ®ÂÅö‰∫õ‰ªÄ‰πàÔºü",
        bn: "üåü ‡¶Æ‡¶æ‡¶®‡¶∏‡¶ø‡¶ï ‡¶∏‡ßÅ‡¶∏‡ßç‡¶•‡¶§‡¶æ‡¶∞ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï\n\n‡¶Ü‡¶ú ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?",
        ta: "üåü ‡ÆÆ‡Æ© ‡Æ®‡Æ≤ ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç\n\n‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æé‡Æ™‡Øç‡Æ™‡Æü‡Æø ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç?",
        my: "üåü ·ÄÖ·Ä≠·Äê·Ä∫·ÄÄ·Äª·Äî·Ä∫·Ä∏·Äô·Ä¨·Äõ·Ä±·Ä∏ ·Ä°·ÄÄ·Ä∞·Ä°·Ää·ÄÆ\n\n·Äö·Äî·Ä±·Ä∑ ·ÄÄ·Äª·ÄΩ·Äî·Ä∫·Äê·Ä±·Ä¨·Ä∫ ·Äû·ÄÑ·Ä∑·Ä∫·ÄÄ·Ä≠·ÄØ ·Äò·Äö·Ä∫·Äú·Ä≠·ÄØ ·ÄÄ·Ä∞·Ää·ÄÆ·Äî·Ä≠·ÄØ·ÄÑ·Ä∫·Äô·Äú·Ä≤?",
        id: "üåü Asisten Kesejahteraan Mental\n\nBagaimana saya bisa membantu Anda hari ini?"
      },
      welcome_message: {
        en: "üëã Welcome! I'm here to support your mental wellness journey. Everything is confidential and anonymous.",
        zh: "üëã Ê¨¢ËøéÔºÅÊàëÂú®ËøôÈáåÊîØÊåÅÊÇ®ÁöÑÂøÉÁêÜÂÅ•Â∫∑‰πãÊóÖ„ÄÇ‰∏ÄÂàáÈÉΩÊòØ‰øùÂØÜÂíåÂåøÂêçÁöÑ„ÄÇ",
        bn: "üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶®‡¶∏‡¶ø‡¶ï ‡¶∏‡ßÅ‡¶∏‡ßç‡¶•‡¶§‡¶æ‡¶∞ ‡¶Ø‡¶æ‡¶§‡ßç‡¶∞‡¶æ‡¶Ø‡¶º ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶õ‡¶ø‡•§ ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ó‡ßã‡¶™‡¶®‡ßÄ‡¶Ø‡¶º ‡¶è‡¶¨‡¶Ç ‡¶®‡¶æ‡¶Æ‡¶π‡ßÄ‡¶®‡•§",
        ta: "üëã ‡Æµ‡Æ∞‡Æµ‡Øá‡Æ±‡Øç‡Æï‡Æø‡Æ±‡Øã‡ÆÆ‡Øç! ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ© ‡Æ®‡Æ≤ ‡Æ™‡ÆØ‡Æ£‡Æ§‡Øç‡Æ§‡Øà ‡ÆÜ‡Æ§‡Æ∞‡Æø‡Æï‡Øç‡Æï ‡Æ®‡Ææ‡Æ©‡Øç ‡Æá‡Æô‡Øç‡Æï‡Øá ‡Æá‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. ‡Æé‡Æ≤‡Øç‡Æ≤‡Ææ‡ÆÆ‡Øç ‡Æ∞‡Æï‡Æö‡Æø‡ÆØ‡ÆÆ‡Ææ‡Æ©‡Æ§‡ØÅ ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ®‡Ææ‡ÆÆ‡Æ§‡Øá‡ÆØ‡ÆÆ‡Ææ‡Æ©‡Æ§‡ØÅ.",
        my: "üëã ·ÄÄ·Äº·Ä≠·ÄØ·ÄÜ·Ä≠·ÄØ·Äï·Ä´·Äê·Äö·Ä∫! ·Äû·ÄÑ·Ä∑·Ä∫·ÄÖ·Ä≠·Äê·Ä∫·ÄÄ·Äª·Äî·Ä∫·Ä∏·Äô·Ä¨·Äõ·Ä±·Ä∏ ·ÄÅ·Äõ·ÄÆ·Ä∏·ÄÄ·Ä≠·ÄØ ·Äï·Ä∂·Ä∑·Äï·Ä≠·ÄØ·Ä∏·Äñ·Ä≠·ÄØ·Ä∑ ·ÄÄ·Äª·ÄΩ·Äî·Ä∫·Äê·Ä±·Ä¨·Ä∫ ·Äí·ÄÆ·Äô·Äæ·Ä¨·Äõ·Äæ·Ä≠·Äï·Ä´·Äê·Äö·Ä∫·Åã ·Ä°·Ä¨·Ä∏·Äú·ÄØ·Ä∂·Ä∏ ·Äú·Äª·Äæ·Ä≠·ÄØ·Ä∑·Äù·Äæ·ÄÄ·Ä∫·Äï·Äº·ÄÆ·Ä∏ ·Ä°·Äô·Ää·Ä∫·Äô·Äñ·Ä±·Ä¨·Ä∫·Äï·Ä´·Åã",
        id: "üëã Selamat datang! Saya di sini untuk mendukung perjalanan kesejahteraan mental Anda. Semuanya rahasia dan anonim."
      },
      phq4_intro: {
        en: "üìã This is a brief mental health screening (PHQ-4). It takes 2 minutes and helps assess anxiety and depression levels.",
        zh: "üìã ËøôÊòØ‰∏Ä‰∏™ÁÆÄÁü≠ÁöÑÂøÉÁêÜÂÅ•Â∫∑Á≠õÊü•(PHQ-4)„ÄÇÈúÄË¶Å2ÂàÜÈíüÔºåÊúâÂä©‰∫éËØÑ‰º∞ÁÑ¶ËôëÂíåÊäëÈÉÅÊ∞¥Âπ≥„ÄÇ",
        bn: "üìã ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶Æ‡¶æ‡¶®‡¶∏‡¶ø‡¶ï ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶ø‡¶Ç (PHQ-4)‡•§ ‡¶è‡¶ü‡¶ø 2 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶®‡ßá‡¶Ø‡¶º ‡¶è‡¶¨‡¶Ç ‡¶â‡¶¶‡ßç‡¶¨‡ßá‡¶ó ‡¶ì ‡¶¨‡¶ø‡¶∑‡¶£‡ßç‡¶®‡¶§‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá‡•§",
        ta: "üìã ‡Æá‡Æ§‡ØÅ ‡Æí‡Æ∞‡ØÅ ‡Æö‡ØÅ‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ÆÆ‡Ææ‡Æ© ‡ÆÆ‡Æ© ‡Æ®‡Æ≤ ‡Æ™‡Æ∞‡Æø‡Æö‡Øã‡Æ§‡Æ©‡Øà (PHQ-4). ‡Æá‡Æ§‡ØÅ 2 ‡Æ®‡Æø‡Øç‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æü‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æµ‡Æ≤‡Øà ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Æ©‡Æö‡Øç‡Æö‡Øã‡Æ∞‡Øç‡Æµ‡ØÅ ‡Æ®‡Æø‡Æ≤‡Øà‡Æï‡Æ≥‡Øà ‡ÆÆ‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü ‡Æâ‡Æ§‡Æµ‡ØÅ‡Æï‡Æø‡Æ±‡Æ§‡ØÅ.",
        my: "üìã ·Äí·Ä´·ÄÄ ·Äê·Ä≠·ÄØ·Äê·Ä±·Ä¨·ÄÑ·Ä∫·Ä∏·Äê·Ä≤·Ä∑ ·ÄÖ·Ä≠·Äê·Ä∫·ÄÄ·Äª·Äî·Ä∫·Ä∏·Äô·Ä¨·Äõ·Ä±·Ä∏ ·ÄÖ·ÄÖ·Ä∫·ÄÜ·Ä±·Ä∏·Äô·Äæ·ÄØ (PHQ-4) ·Äï·Ä´·Åã ·ÅÇ ·Äô·Ä≠·Äî·ÄÖ·Ä∫·ÄÅ·Äî·Ä∑·Ä∫ ·ÄÄ·Äº·Ä¨·Äï·Äº·ÄÆ·Ä∏ ·ÄÖ·Ä≠·ÄØ·Ä∏·Äõ·Ä≠·Äô·Ä∫·Äô·Äæ·ÄØ·Äî·Ä≤·Ä∑ ·ÄÖ·Ä≠·Äê·Ä∫·Äì·Ä¨·Äê·Ä∫·ÄÄ·Äª·Äô·Äæ·ÄØ ·Ä°·ÄÜ·ÄÑ·Ä∑·Ä∫·Äô·Äª·Ä¨·Ä∏·ÄÄ·Ä≠·ÄØ ·Ä°·ÄÄ·Ä≤·Äñ·Äº·Äê·Ä∫·Äñ·Ä≠·ÄØ·Ä∑ ·ÄÄ·Ä∞·Ää·ÄÆ·Äï·Ä´·Äê·Äö·Ä∫·Åã",
        id: "üìã Ini adalah skrining kesehatan mental singkat (PHQ-4). Membutuhkan 2 menit dan membantu menilai tingkat kecemasan dan depresi."
      },
      mood_checkin_prompt: {
        en: "üòä How are you feeling today? Please rate your mood from 1-10:",
        zh: "üòä ÊÇ®‰ªäÂ§©ÊÑüËßâÂ¶Ç‰ΩïÔºüËØ∑ÁªôÊÇ®ÁöÑÂøÉÊÉÖÊâìÂàÜ1-10Ôºö",
        bn: "üòä ‡¶Ü‡¶ú ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶® ‡¶ï‡ßá‡¶Æ‡¶®? ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡ßß-‡ßß‡ß¶ ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶ú‡¶æ‡¶ú ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:",
        ta: "üòä ‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ™‡Øç‡Æ™‡Æü‡Æø ‡Æâ‡Æ£‡Æ∞‡Øç‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç? ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ©‡Æ®‡Æø‡Æ≤‡Øà‡ÆØ‡Øà 1-10 ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç:",
        my: "üòä ·Äö·Äî·Ä±·Ä∑ ·Äû·ÄÑ·Ä∫ ·Äò·Äö·Ä∫·Äú·Ä≠·ÄØ ·ÄÅ·Ä∂·ÄÖ·Ä¨·Ä∏·Äî·Ä±·Äï·Ä´·Äû·Äú·Ä≤? ·Äû·ÄÑ·Ä∑·Ä∫·ÄÖ·Ä≠·Äê·Ä∫·ÄÅ·Ä∂·ÄÖ·Ä¨·Ä∏·Äô·Äæ·ÄØ·ÄÄ·Ä≠·ÄØ ·ÅÅ-·ÅÅ·ÅÄ ·Ä°·Äê·ÄΩ·ÄÑ·Ä∫·Ä∏ ·Ä°·ÄÜ·ÄÑ·Ä∑·Ä∫·Äû·Äê·Ä∫·Äô·Äæ·Äê·Ä∫·Äï·Ä´:",
        id: "üòä Bagaimana perasaan Anda hari ini? Silakan beri nilai suasana hati Anda dari 1-10:"
      }
      // Add more localized texts as needed...
    };

    const textSet = texts[key];
    if (!textSet) return key;
    
    return textSet[language] || textSet.en || key;
  }

  private showAppInfo(userState: UserState): ConversationResponse {
    return {
      message: this.getLocalizedText('app_info', userState.language),
      buttons: [
        { id: 'get_started', title: this.getLocalizedText('get_started', userState.language) }
      ],
      newState: {
        ...userState,
        currentFlow: 'main_menu',
        step: 0
      }
    };
  }

  private handleStopCommand(userState: UserState): ConversationResponse {
    return {
      message: this.getLocalizedText('goodbye_message', userState.language),
      newState: {
        ...userState,
        currentFlow: 'stopped',
        step: 0,
        context: {}
      }
    };
  }

  private matchCategory(message: string, language: string): string | null {
    // Implement category matching logic based on user input and language
    const categoryMappings: Record<string, string[]> = {
      'crisis': ['crisis', 'emergency', 'Âç±Êú∫', '‡¶∏‡¶Ç‡¶ï‡¶ü', '‡Æ®‡ØÜ‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æü‡Æø', '·Ä°·Äõ·Ä±·Ä∏·Äï·Ä±·Ä´·Ä∫', 'krisis'],
      'counseling': ['counseling', 'therapy', 'Âí®ËØ¢', '‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂', '‡ÆÜ‡Æ≤‡Øã‡Æö‡Æ©‡Øà', '·Ä°·ÄÄ·Äº·Ä∂·Äï·Ä±·Ä∏·ÄÅ·Äº·ÄÑ·Ä∫·Ä∏', 'konseling'],
      'support_group': ['group', 'support', 'Â∞èÁªÑ', '‡¶ó‡ßç‡¶∞‡ßÅ‡¶™', '‡Æï‡ØÅ‡Æ¥‡ØÅ', '·Ä°·ÄØ·Äï·Ä∫·ÄÖ·ÄØ', 'grup'],
      'self_help': ['self', 'help', 'Ëá™Âä©', '‡¶∏‡ßç‡¶¨-‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ', '‡Æö‡ØÅ‡ÆØ ‡Æâ‡Æ§‡Æµ‡Æø', '·ÄÄ·Ä≠·ÄØ·Äö·Ä∫·Äê·Ä≠·ÄØ·ÄÑ·Ä∫·ÄÄ·Ä∞·Ää·ÄÆ', 'bantuan diri']
    };

    const lowerMessage = message.toLowerCase();
    for (const [category, keywords] of Object.entries(categoryMappings)) {
      if (keywords.some(keyword => lowerMessage.includes(keyword.toLowerCase()))) {
        return category;
      }
    }
    
    return 'self_help'; // Default fallback
  }

  private getResourceContent(resource: any, language: string): string {
    // Extract content from Json fields based on language
    const title = resource.title?.[language] || resource.title?.en || 'Resource';
    const description = resource.description?.[language] || resource.description?.en || '';
    
    return `${title}\n${description}`;
  }
}